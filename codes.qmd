# Computational Science Software

As a computational scientist, I use the tools of computation to investigate
novel scientific questions.

Usually, one can combine existing scientific software libraries in a new code to
advance computational research.

Sometimes, existing software does not quite match our current needs, and we find
ourselves having to write our own code from scratch.

Not only have I relied on open source software for my scientific discoveries but
also open software lets anyone reading my research easily look up the exact code
I used to see my computational steps.

I thus like to make my scientific codes freely available as open-source software
whenever permissible.

## Open Source Scientific Codes

Here are some of the open source scientific codes I have either created with my
collaborators or contributed to as a developer in the course of my research.

### The Energy Research and Forecasting (ERF) Code

* Mesoscale weather modeling
* Adaptive mesh refinement
* Complex terrain modeling
* Water cycle modeling (precipitation, evaporation, condensation)
* For details, see the [Energy Research and Forecasting page](mesoscale.qmd)
* Available at the [ERF GitHub](https://github.com/erf-model/erf)

### The Emu Code For Neutrino Quantum Kinetics

* "Quantum" in evolving the neutrino flavor state
* "Kinetics" in transporting neutrino radiation
* Lagrangian representation for neutrinos
* Particle-In-Cell method for mean-field neutrino interactions
* Fully six-dimensional (three space, two angle, and time)
* Symbolic code generation supports two or three neutrino flavor states
* For details, see the [Neutrino Quantum Kinetics page](neutrino_quantum_kinetics.qmd)
* Available at the [Emu GitHub](https://github.com/AMReX-Astro/Emu)

### The STvAR Code Generator For Solving PDEs

* Eulerian PDE solver method
* Finite differencing for spatial derivatives up to fourth order
* Method of Lines with Runge-Kutta for time evolution up to fourth order
* Framework based on AMReX
* Adaptive mesh refinement focuses resolution where needed
* Subcycling in time advances each resolution level at its resolved timestep
* Portable parallelization for multi-CPU or multi-GPU computing
* Requires only Python experience to create high-performance simulation code
* For details, see the [Code Generation page](pde_code_generation.qmd)
* Available at the [STvAR GitHub](https://github.com/AMReX-Astro/STvAR)
      
### The Castro Code for Compressible Astrophysics

* Compressible hydrodynamics
* Radiation hydrodynamics
* Magnetohydrodynamics
* Astrophysical Equations of State include electron degeneracy, relativity
* Second or Fourth order in space and time
* Adaptive mesh refinement based on AMReX
* Performance portable for personal or super computers 
* For research involving Castro, see the [Neutron Stars page](neutron_stars.qmd)
* Available at the [Castro GitHub](https://github.com/AMReX-Astro/Castro) 

### The MAESTROeX Code for Low-Mach Number Astrophysics

* Low-Mach number hydrodynamics
* Models convection in stellar atmospheres
* Captures compressibility effects from atmospheric stratification
* Laminar flame simulations
* Adaptive mesh refinement based on AMReX
* For surrogate ML models involving MAESTROeX, see the [Machine Learning Surrogate Models page](ml_reactions.qmd)
* Available at the [MAESTROeX GitHub](https://github.com/AMReX-Astro/MAESTROeX)

### The Microphysics Code for Astrophysics

* Nuclear reaction solvers
* Astrophysical equations of state
* Modular structure
* Implements microscale (subgrid) physics required by Castro, MAESTROeX
* For my reaction network and time integration research, see the [Nuclear Reactions page](nuclear_reactions.qmd)
* Available at the [Microphysics GitHub](https://github.com/AMReX-Astro/Microphysics)

### The pynucastro Code for Astrophysical Reaction Networks

* Easily construct reaction networks from available reaction rate datasets
* Interface with pynucastro using python scripts or Jupyter notebooks
* Visualize reaction networks and their rates over a range of thermodynamic conditions
* Easily see which rates are most important for an astrophysical environment
* Filter rates based on their relevance to your intended environment
* Turn a reaction network into a symbolic set of ordinary differential equations
* Evolve your reaction network in time
* Generate Python or C++ code to calculate nucleosynthesis and nuclear energy generation
* Generate code for the general Microphysics package to use in Castro or MAESTROeX
* Or, generate code for your own hydrodynamics or stellar evolution code
* For my reaction network and time integration research, see the [Nuclear Reactions page](nuclear_reactions.qmd)
* Available at the [pynucastro GitHub](https://github.com/pynucastro/pynucastro)
