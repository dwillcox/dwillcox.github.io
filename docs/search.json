[
  {
    "objectID": "compsci_philosophy.html",
    "href": "compsci_philosophy.html",
    "title": "Computational Science Philosophy",
    "section": "",
    "text": "I am equally a computational scientist as I am a physicist. In fact, I consider all these tightly interrelated. I analyze research topics from a physics perspective. Then I use the tools of computation and applied mathematics to carry out science by testing and falsifying hypotheses.\n\n\nMy approach is to achieve reproducible results by thorough code documentation, strict version control, and ongoing testing.\nValidation is ongoing, not just at the end of a project or done once and then forgotten.\nDevelopment should keep in mind specific tests the numerical code should pass. Sometimes this means unit tests, sometimes this means regression tests.\nRun tests on an ongoing basis using Continuous Integration through, e.g. GitHub Actions or an equivalent.\nCatch regression or unit test errors at pull request review time, if not earlier, before breaking changes have a chance to make it into the main code. This simple approach is enormously useful when a bug appears in my simulations and I find myself backtracking through the code history to pinpoint where it came from!\nAlways have someone review your code, even if you are just working with one other person.",
    "crumbs": [
      "Computational Science Philosophy"
    ]
  },
  {
    "objectID": "compsci_philosophy.html#my-approach-to-computational-science",
    "href": "compsci_philosophy.html#my-approach-to-computational-science",
    "title": "Computational Science Philosophy",
    "section": "",
    "text": "My approach is to achieve reproducible results by thorough code documentation, strict version control, and ongoing testing.\nValidation is ongoing, not just at the end of a project or done once and then forgotten.\nDevelopment should keep in mind specific tests the numerical code should pass. Sometimes this means unit tests, sometimes this means regression tests.\nRun tests on an ongoing basis using Continuous Integration through, e.g. GitHub Actions or an equivalent.\nCatch regression or unit test errors at pull request review time, if not earlier, before breaking changes have a chance to make it into the main code. This simple approach is enormously useful when a bug appears in my simulations and I find myself backtracking through the code history to pinpoint where it came from!\nAlways have someone review your code, even if you are just working with one other person.",
    "crumbs": [
      "Computational Science Philosophy"
    ]
  },
  {
    "objectID": "pde_code_generation.html",
    "href": "pde_code_generation.html",
    "title": "Solving PDEs With Code Generation",
    "section": "",
    "text": "Scientists frequently work to understand complicated space-time dynamics or conservation laws by describing their evolution using Partial Differential Equations (PDEs). Simply put, PDEs predict how a quantity evolves by calculating derivatives in space and time.\nWhile at Berkeley Lab, I worked with other computational scientists to create automated code generation methods for solving PDE systems using either Eulerian or Lagrangian techniques.\nOur codes are open-source, and our methods are generally useful for a wide variety of scientific contexts where PDEs exist or could be devised but would be challenging to solve. We can translate symbolic PDEs into high performance code very simply and create a simulation package ready to run on modern GPU-accelerated supercomputers.\nIf you would like to collaborate on such research, you are always welcome to reach out.\n\n\nAs part of the ExaStar team within the DOE Exascale Computing Project, I worked with Adam Peterson to solve the numerical general relativity equations using the AMReX framework for block-structured adaptive mesh refinement.\nThe Einstein equations are notoriously tricky to solve numerically, so we first had to decide on a reliable numerical technique that we could also combine with ExaStar solvers for hydrodynamics or radiation transport.\nWe chose the Method of Lines numerical technique, which replaces all spatial derivatives with finite-difference derivatives. The Method of Lines technique leaves the time derivatives in the equations symbolic, but it tells us exactly how to compute them using finite-difference discretization for all the other terms in the PDEs.\nHowever, the Einstein equations are notoriously lengthy when expanded into numerical form. Translating hundreds of arithmetic terms into computer code would be laborious and it would be very easy to make mistakes.\nWe needed a fast, reliable solution, so we turned to symbolic code generation based on the open-source Python package for symbolic mathematics, Sympy. Sympy is capable of translating symbolic expressions into C++ or Fortran computer code.\nWe used Sympy to write STvAR, a Python and C++ framework. The Python part of STvAR uses Sympy to discretize all the spatial partial derivatives appearing in a general set of PDEs using finite differencing up to fourth order. After replacing all continuous spatial derivatives with finite differences, we rearrange our PDEs to define the continuous time derivatives, still symbolic. STvAR then generates code to compute all the PDE time derivatives in C++.\nThe STvAR C++ framework then incorporates the generated C++ time derivatives with preprocessor include statements. Our C++ solver framework then reads user-supplied initial conditions and evolves the PDEs forward in time using a variety of Runge-Kutta explicit time integration methods up to fourth order. We use the AMReX framework to provide block-structured adaptive mesh refinement, and we symbolically generate our refinement tagging C++ code.\n\n\n\n\n\n\n\n\n\nGet STvAR\n\n\n\nSTvAR is freely available at the STvAR GitHub.\n\n\nSTvAR thus provides computational scientists with an easy way to get started solving their PDE systems. STvAR generates high-performance, portably parallel code that leverages adaptive mesh refinement to focus computational resources where they are most needed.\nUsers just starting out with high performance computing do not need to understand all the finer details of multi-level synchronization or parallel ghost cell communication in order for their solver to get up and running. STvAR handles all these algorithmic details automatically with sensible default options. Once the code is running, users can take advantage of all the general domain decomposition and refinement customization options AMReX supports simply by reviewing the AMReX documentation and altering their inputs files, no C++ required.\nSTvAR enabled us to create a numerical solver for general relativity and then simulate black hole mergers to compute their radiated gravitational wave signature that an Earth-based detector like LIGO could measure.\n\n\n\nSimulated binary black hole inspiral traces black hole centers through (3+1) spacetime and radiates the characteristic chirp waveform.\n\n\nWe published our code generation validation work for general relativity in Peterson et al. (2023).\n\n\n\nOur code-generation research to solve numerical general relativity soon sparked interest in other fields.\nBen Safdi and his collaborators were coincidentally studying a hypothesized axion dark matter model they wished to solve on cosmological scales.\nThey contacted us wishing to use our code generation framework to solve the axion field equations with adaptive mesh refinement.\nWe worked with these dark matter researchers to construct a simulation code solving the axion field equations with high order finite differencing. The primary challenge was following the axion string evolution on the cosmological scales required, requiring careful adaptive mesh refinement.\nOur collaboration enabled the team to simulate axion string evolution and radiation on cosmological spacetime scales with unprecedented resolution.\n\n\n\nThree-dimensional simulation evolving the axion field over cosmological time, illustrating the axion energy density and axion string structures at late times.\n\n\nThese new simulations tightened the current cosmological constraints on the range of axion mass-energy by more than a factor of three.\nFor details, see Buschmann et al. (2022).\n\n\n\nSometimes Eulerian methods introduce too much artificial numerical diffusion into a set of PDEs where transport dominates the physics of interest.\nThe reason for this is fundamentally that Eulerian methods represent the solution as values at fixed points in space, or as values corresponding to small volumes of space.\nWhen physical matter moves across the domain, the underlying spatial grid remains fixed in place.\nDepending on the discretization method, there may be smaller or larger amounts of numerical errors introduced as a result of this mis-match between physical transport and the underlying grid.\nLagrangian methods address this issue by simply moving the grid points or discrete volumes along with the physical matter they represent.\nFor arbitrary three dimensional flows, where turbulence is possible, this can quickly lead to a tangled grid. For this reason, Lagrangian techniques are generally chosen when the computational complexity of grid tangling can be avoided.\nFor example, astrophysical radiation can be modeled by assigning a Lagrangian particle in code to represent a set of physical photons or neutrinos. The AMReX framework we used for Eulerian AMR supports Lagrangian particles on adaptive meshes as well for such cases.\nCode generation is still very useful when those particles have non-trivial evolution.\nSuppose you are modeling neutrino radiation transport with Lagrangian particles, and you decide you need to evolve the neutrino quantum flavor state as well. This requires solving complex-valued equations associated with each particle as it travels, picking up source terms for that equation from nearby neutrinos.\nTo see how code generation and a general Lagrangian framework can successfully address this scenario, see my Neutrino Quantum Kinetics research page.",
    "crumbs": [
      "Solving PDEs With Code Generation"
    ]
  },
  {
    "objectID": "pde_code_generation.html#creating-stvar-to-generate-adaptive-mesh-eulerian-pde-solvers",
    "href": "pde_code_generation.html#creating-stvar-to-generate-adaptive-mesh-eulerian-pde-solvers",
    "title": "Solving PDEs With Code Generation",
    "section": "",
    "text": "As part of the ExaStar team within the DOE Exascale Computing Project, I worked with Adam Peterson to solve the numerical general relativity equations using the AMReX framework for block-structured adaptive mesh refinement.\nThe Einstein equations are notoriously tricky to solve numerically, so we first had to decide on a reliable numerical technique that we could also combine with ExaStar solvers for hydrodynamics or radiation transport.\nWe chose the Method of Lines numerical technique, which replaces all spatial derivatives with finite-difference derivatives. The Method of Lines technique leaves the time derivatives in the equations symbolic, but it tells us exactly how to compute them using finite-difference discretization for all the other terms in the PDEs.\nHowever, the Einstein equations are notoriously lengthy when expanded into numerical form. Translating hundreds of arithmetic terms into computer code would be laborious and it would be very easy to make mistakes.\nWe needed a fast, reliable solution, so we turned to symbolic code generation based on the open-source Python package for symbolic mathematics, Sympy. Sympy is capable of translating symbolic expressions into C++ or Fortran computer code.\nWe used Sympy to write STvAR, a Python and C++ framework. The Python part of STvAR uses Sympy to discretize all the spatial partial derivatives appearing in a general set of PDEs using finite differencing up to fourth order. After replacing all continuous spatial derivatives with finite differences, we rearrange our PDEs to define the continuous time derivatives, still symbolic. STvAR then generates code to compute all the PDE time derivatives in C++.\nThe STvAR C++ framework then incorporates the generated C++ time derivatives with preprocessor include statements. Our C++ solver framework then reads user-supplied initial conditions and evolves the PDEs forward in time using a variety of Runge-Kutta explicit time integration methods up to fourth order. We use the AMReX framework to provide block-structured adaptive mesh refinement, and we symbolically generate our refinement tagging C++ code.",
    "crumbs": [
      "Solving PDEs With Code Generation"
    ]
  },
  {
    "objectID": "pde_code_generation.html#stvar-enables-users-to-leap-into-solving-pdes-with-high-performance-computing",
    "href": "pde_code_generation.html#stvar-enables-users-to-leap-into-solving-pdes-with-high-performance-computing",
    "title": "Solving PDEs With Code Generation",
    "section": "",
    "text": "Get STvAR\n\n\n\nSTvAR is freely available at the STvAR GitHub.\n\n\nSTvAR thus provides computational scientists with an easy way to get started solving their PDE systems. STvAR generates high-performance, portably parallel code that leverages adaptive mesh refinement to focus computational resources where they are most needed.\nUsers just starting out with high performance computing do not need to understand all the finer details of multi-level synchronization or parallel ghost cell communication in order for their solver to get up and running. STvAR handles all these algorithmic details automatically with sensible default options. Once the code is running, users can take advantage of all the general domain decomposition and refinement customization options AMReX supports simply by reviewing the AMReX documentation and altering their inputs files, no C++ required.\nSTvAR enabled us to create a numerical solver for general relativity and then simulate black hole mergers to compute their radiated gravitational wave signature that an Earth-based detector like LIGO could measure.\n\n\n\nSimulated binary black hole inspiral traces black hole centers through (3+1) spacetime and radiates the characteristic chirp waveform.\n\n\nWe published our code generation validation work for general relativity in Peterson et al. (2023).",
    "crumbs": [
      "Solving PDEs With Code Generation"
    ]
  },
  {
    "objectID": "pde_code_generation.html#stvar-generated-code-narrows-predicted-limits-on-hypothetical-axion-dark-matter",
    "href": "pde_code_generation.html#stvar-generated-code-narrows-predicted-limits-on-hypothetical-axion-dark-matter",
    "title": "Solving PDEs With Code Generation",
    "section": "",
    "text": "Our code-generation research to solve numerical general relativity soon sparked interest in other fields.\nBen Safdi and his collaborators were coincidentally studying a hypothesized axion dark matter model they wished to solve on cosmological scales.\nThey contacted us wishing to use our code generation framework to solve the axion field equations with adaptive mesh refinement.\nWe worked with these dark matter researchers to construct a simulation code solving the axion field equations with high order finite differencing. The primary challenge was following the axion string evolution on the cosmological scales required, requiring careful adaptive mesh refinement.\nOur collaboration enabled the team to simulate axion string evolution and radiation on cosmological spacetime scales with unprecedented resolution.\n\n\n\nThree-dimensional simulation evolving the axion field over cosmological time, illustrating the axion energy density and axion string structures at late times.\n\n\nThese new simulations tightened the current cosmological constraints on the range of axion mass-energy by more than a factor of three.\nFor details, see Buschmann et al. (2022).",
    "crumbs": [
      "Solving PDEs With Code Generation"
    ]
  },
  {
    "objectID": "pde_code_generation.html#code-generation-for-lagrangian-pde-solvers",
    "href": "pde_code_generation.html#code-generation-for-lagrangian-pde-solvers",
    "title": "Solving PDEs With Code Generation",
    "section": "",
    "text": "Sometimes Eulerian methods introduce too much artificial numerical diffusion into a set of PDEs where transport dominates the physics of interest.\nThe reason for this is fundamentally that Eulerian methods represent the solution as values at fixed points in space, or as values corresponding to small volumes of space.\nWhen physical matter moves across the domain, the underlying spatial grid remains fixed in place.\nDepending on the discretization method, there may be smaller or larger amounts of numerical errors introduced as a result of this mis-match between physical transport and the underlying grid.\nLagrangian methods address this issue by simply moving the grid points or discrete volumes along with the physical matter they represent.\nFor arbitrary three dimensional flows, where turbulence is possible, this can quickly lead to a tangled grid. For this reason, Lagrangian techniques are generally chosen when the computational complexity of grid tangling can be avoided.\nFor example, astrophysical radiation can be modeled by assigning a Lagrangian particle in code to represent a set of physical photons or neutrinos. The AMReX framework we used for Eulerian AMR supports Lagrangian particles on adaptive meshes as well for such cases.\nCode generation is still very useful when those particles have non-trivial evolution.\nSuppose you are modeling neutrino radiation transport with Lagrangian particles, and you decide you need to evolve the neutrino quantum flavor state as well. This requires solving complex-valued equations associated with each particle as it travels, picking up source terms for that equation from nearby neutrinos.\nTo see how code generation and a general Lagrangian framework can successfully address this scenario, see my Neutrino Quantum Kinetics research page.",
    "crumbs": [
      "Solving PDEs With Code Generation"
    ]
  },
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "Talks",
    "section": "",
    "text": "I’ve presented my research quite a few times for both scientific specialists and wider audiences.\nWhatever the audience, I always do my best to explain complex ideas clearly.\nHere, you’ll find my talks that are available online as well as a complete list for reference.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n07/15/2021: Supercomputing For Nuclear Astrophysics\n\nSeminar for the CS Summer Student Seminar Series, Computing Sciences, Lawrence Berkeley National Laboratory\n\n04/19/2021: Neutrino Flavor Transformations with Emu: A New Particle-in-Cell Code for Quantum Kinetics\n\nInvited Speaker in APS April Meeting 2021 Session T05\n\n03/02/2021: Towards Surrogate Models for Nuclear Reactions in Astrophysics\n\nSpeaker in SIAM CSE 2021 Minisymposium MS137\n\n07/09/2020: Simulating Supernovae with Supercomputers\n\nSeminar for the CS Summer Student Seminar Series, Computing Sciences, Lawrence Berkeley National Laboratory\n\n01/31/2020: Towards ExaScale Supernovae Simulations\n\nTalk at the 1st Annual CS Area Postdoc Symposium, Computing Sciences, Lawrence Berkeley National Laboratory\n\n11/15/2017: Stellar Explosion Mechanics: Properties and Physical Processes in White Dwarf Interiors\n\nSeminar for the Student Seminar Series, Institute for Advanced Computational Sciences, Stony Brook University\n\n10/05/2017: The Dynamics and Origins of Thermonuclear (Type Ia) Supernovae\n\nTalk at the Interdisciplinary Theoretical and Computational Physical Science meeting, Tokyo Institute of Technology, Japan\n\n09/29/2017: A Brief Tour of the AMReX Astrophysics Suite of Codes\n\nTalk at NY Area Computational Hydro Workshop, Flatiron Institute/CCA\n\n06/28/2017: White Dwarfs as Type Ia Supernovae Progenitors\n\nSeminar for the Research Café Series, Center for Inclusive Education, Stony Brook University\n\n06/16/2017: Simulations of Various White Dwarf Progenitor Models for Type Ia Supernovae\n\nInvited talk at Current Challenges in the Physics of White Dwarf Stars, Santa Fe, NM\n\n06/14/2017: Status of Recent Work for Type Ia Supernovae Progenitors: Hybrid C-O-Ne White Dwarfs, the Convective Urca Process, and Accelerated Reaction Networks\n\nInvited astrophysics seminar at Los Alamos National Laboratory, NM\n\n02/05/2017: Elucidating the Convective Urca Process in Pre-Supernova White Dwarfs Using Three-Dimensional Simulations\n\nTalk at JINA-CEE Frontiers in Nuclear Astrophysics: Junior Researchers Workshop, Michigan State University\n\n\n\n\n\n\n06/18/2019: How to Simulate a Thermonuclear Supernova\n\nPublic talk at the Berkeley Public Library, Claremont\n\n02/21/2018: Saturn in 13 Years: the Cassini-Huygens Mission\n\nPublic talk at the Astronomical Society of Long Island, Vanderbilt Museum and Planetarium\n\n11/03/2017: Saturn in 13 Years: the Cassini-Huygens Mission\n\nPublic talk in the Astronomy Open Night Series, Stony Brook University"
  },
  {
    "objectID": "talks.html#complete-list-of-talks",
    "href": "talks.html#complete-list-of-talks",
    "title": "Talks",
    "section": "",
    "text": "07/15/2021: Supercomputing For Nuclear Astrophysics\n\nSeminar for the CS Summer Student Seminar Series, Computing Sciences, Lawrence Berkeley National Laboratory\n\n04/19/2021: Neutrino Flavor Transformations with Emu: A New Particle-in-Cell Code for Quantum Kinetics\n\nInvited Speaker in APS April Meeting 2021 Session T05\n\n03/02/2021: Towards Surrogate Models for Nuclear Reactions in Astrophysics\n\nSpeaker in SIAM CSE 2021 Minisymposium MS137\n\n07/09/2020: Simulating Supernovae with Supercomputers\n\nSeminar for the CS Summer Student Seminar Series, Computing Sciences, Lawrence Berkeley National Laboratory\n\n01/31/2020: Towards ExaScale Supernovae Simulations\n\nTalk at the 1st Annual CS Area Postdoc Symposium, Computing Sciences, Lawrence Berkeley National Laboratory\n\n11/15/2017: Stellar Explosion Mechanics: Properties and Physical Processes in White Dwarf Interiors\n\nSeminar for the Student Seminar Series, Institute for Advanced Computational Sciences, Stony Brook University\n\n10/05/2017: The Dynamics and Origins of Thermonuclear (Type Ia) Supernovae\n\nTalk at the Interdisciplinary Theoretical and Computational Physical Science meeting, Tokyo Institute of Technology, Japan\n\n09/29/2017: A Brief Tour of the AMReX Astrophysics Suite of Codes\n\nTalk at NY Area Computational Hydro Workshop, Flatiron Institute/CCA\n\n06/28/2017: White Dwarfs as Type Ia Supernovae Progenitors\n\nSeminar for the Research Café Series, Center for Inclusive Education, Stony Brook University\n\n06/16/2017: Simulations of Various White Dwarf Progenitor Models for Type Ia Supernovae\n\nInvited talk at Current Challenges in the Physics of White Dwarf Stars, Santa Fe, NM\n\n06/14/2017: Status of Recent Work for Type Ia Supernovae Progenitors: Hybrid C-O-Ne White Dwarfs, the Convective Urca Process, and Accelerated Reaction Networks\n\nInvited astrophysics seminar at Los Alamos National Laboratory, NM\n\n02/05/2017: Elucidating the Convective Urca Process in Pre-Supernova White Dwarfs Using Three-Dimensional Simulations\n\nTalk at JINA-CEE Frontiers in Nuclear Astrophysics: Junior Researchers Workshop, Michigan State University\n\n\n\n\n\n\n06/18/2019: How to Simulate a Thermonuclear Supernova\n\nPublic talk at the Berkeley Public Library, Claremont\n\n02/21/2018: Saturn in 13 Years: the Cassini-Huygens Mission\n\nPublic talk at the Astronomical Society of Long Island, Vanderbilt Museum and Planetarium\n\n11/03/2017: Saturn in 13 Years: the Cassini-Huygens Mission\n\nPublic talk in the Astronomy Open Night Series, Stony Brook University"
  },
  {
    "objectID": "neutrino_quantum_kinetics.html",
    "href": "neutrino_quantum_kinetics.html",
    "title": "Neutrino Quantum Kinetics",
    "section": "",
    "text": "In certain high energy astrophysics contexts, like core-collapse supernovae and neutron star mergers, neutrinos are radiated at such high densities they are capable of exhibiting collective behavior as a many-body quantum system. At the same time, neutrinos travel at nearly the speed of light and must be modeled using the techniques of radiation transport, this is the kinetics part.\n\n\nIt so happens that neutron star mergers, and to a lesser extent, core collapse supernovae, are understood by astrophysicists to produce the majority of all elements heavier than iron on the periodic table, such as gold. Since neutrinos interact with neutrons and protons, neutrinos influence the likelihood of various nucleosynthesis pathways for creating all these heavy elements.\nBut how can we make accurate estimations of which astrophysics events produced various quantities of elements? Well, we observe radiation spectra from these events, then we match these observed spectra with detailed computational models of the explosion and the radiation it produces to determine the starting conditions for the explosion.\nBut computing the influence of neutrinos is fairly difficult, we have to solve a radiation transport problem in six dimensions (three space plus two angular dimensions plus time). Then as if radiation transport weren’t difficult enough, we need to solve a many-body quantum mechanics problem to evolve the neutrino flavor states.\n\n\n\nIf the quantum mechanics of neutrinos is hard to simulate, we might naturally ask what makes the neutrino quantum flavor state so important in the first place.\nGetting the neutrino quantum state right is important because under certain conditions, theorists have found neutrinos can evolve fast flavor instabilities (FFI). Under FFI conditions, the overall neutrino flavor state very rapidly destabilizes before approaching a completely different equilibrium state over longer timescales.\nThe problem is that these FFI events can occur in volumes of space that would fit into the palm of one’s hand, over timescales measured in just a few nanoseconds. This is far faster than explosion simulations can possibly capture, so we need to write a specialized simulation code just for neutrino quantum kinetics.\nWe can then predict what conditions could lead to FFI and the long term outcomes to provide effective models for larger, more complete simulations of the entire explosion event.\n\n\n\nWe can start by considering what we need to solve the kinetic, transport aspect of neutrino evolution.\nSometimes transport problems are best solved with Lagrangian techniques, which represent the solution as a collection of particles.\nLagrangian techniques are often an efficient choice for simulating transport because a solution made up of uniquely moving particles is one way to reduce certain artificial diffusion errors in Eulerian transport models based on a fixed spatial grid.\nLagrangian particles may interact with each other and with matter or fields extending throughout the simulation domain.\nWhy are Lagrangian methods important? Well, they are exactly what we needed for neutrino quantum kinetics.\nNeutrinos are nearly massless and so move at nearly the speed of light. They carry no electrical charge, but they do carry a quantum state called flavor in particle physics.\nNeutrinos arise in large numbers from core collapse supernovae and neutron star merger events in high-energy astrophysics. In such cases, we naturally model neutrinos as radiation we must transport, so we chose a Lagrangian approach.\nEach Lagrangian particle thus represents a number of physical neutrinos. These physical neutrinos have an average flavor state we represent with a \\(3 \\times 3\\) Hermitian matrix associated with the Lagrangian particle.\nThus, not only must our code transport Lagrangian particles, we must also evolve the flavor state matrix associated with each particle.\nI developed a framework based on AMReX for evolving equations associated with Lagrangian particles using global Runge-Kutta time integration. We generated the C++ code each particle must integrate to evolve its complex-valued flavor state matrix using the Sympy package for symbolic mathematics.\nWhen we consider the dynamics of evolving the neutrino flavor state due to neutrino-neutrino and neutrino-matter interactions, the mean-field approximation seemed a natural choice for solving the complex neutrino quantum kinetics equations.\nWe implemented the mean-field approximation using a background spatial grid where we averaged the surrounding particle quantum flavor states. In turn, we interpolated back from the spatial grid to the particle locations in each spatial cell to calculate the time derivative for the particle flavor state matrix. This technique is called a Particle-In-Cell (PIC) Method.\nOur code generation approach with Runge-Kutta integration for the Particle-In-Cell Method is the framework of the Emu simulation code I developed with Sherwood Richers to solve the six-dimensional neutrino quantum kinetics problem.\n\n\n\n\n\n\n\n\n\nGet Emu\n\n\n\nEmu is an open-source code, freely available on the Emu GitHub.\nWe also openly published the Emu inputs files anyone could use to reproduce our published work.\n\n\nIn summary, I worked with Sherwood Richers to create Emu, a new simulation code based on the particle-in-cell technique to solve neutrino quantum kinetics in the mean field approximation.\nEmu evolves the neutrino radiation field using Lagrangian particles traveling atop an underlying spatial mesh that contains the mean field quantum many-body state as well as the nuclear matter background.\n\n\nWe started with one-dimension in space, two dimensions in angle, and three neutrino flavors to evaluate the dynamics of FFI under conditions where other simulation codes provided a means of comparison. We published this work in our first Emu paper.\nFor details, see Richers et al. (2021a).\n\n\n\nAfter validating our method and publishing our numerical technique in our first paper, we moved on to the exciting challenge of fully three-dimensional simulations.\nThis time, we wanted to capture all three dimensions of the volume of space neutrinos traversed while undergoing fast flavor instability. We also wanted to simulate all angular directions in which neutrinos could travel over the full instability timescale.\nWe were able to easily discretize these dimensions because we used Lagrangian particles to represent groups of neutrinos located anywhere in our three-dimensional simulation domain and moving in any of two angular directions covering the unit sphere.\nWe then evolved the neutrinos forward in time using Runge-Kutta integration, for a total of 6 dimensions of space, angle, and time.\nOur Emu code enabled us to simulate the neutrino fast flavor instability in all six dimensions with all three neutrino flavor states.\nWe repeated the FFI conditions in our earlier one-dimensional paper, again with all three neutrino flavors and published our work in a follow-up paper.\n\n\n\nEmu 3D FFI Simulation\n\n\nFor details, see Richers et al. (2021b).",
    "crumbs": [
      "Neutrino Quantum Kinetics"
    ]
  },
  {
    "objectID": "neutrino_quantum_kinetics.html#neutrino-quantum-kinetics-influences-heavy-element-creation-but-is-challenging-to-predict",
    "href": "neutrino_quantum_kinetics.html#neutrino-quantum-kinetics-influences-heavy-element-creation-but-is-challenging-to-predict",
    "title": "Neutrino Quantum Kinetics",
    "section": "",
    "text": "It so happens that neutron star mergers, and to a lesser extent, core collapse supernovae, are understood by astrophysicists to produce the majority of all elements heavier than iron on the periodic table, such as gold. Since neutrinos interact with neutrons and protons, neutrinos influence the likelihood of various nucleosynthesis pathways for creating all these heavy elements.\nBut how can we make accurate estimations of which astrophysics events produced various quantities of elements? Well, we observe radiation spectra from these events, then we match these observed spectra with detailed computational models of the explosion and the radiation it produces to determine the starting conditions for the explosion.\nBut computing the influence of neutrinos is fairly difficult, we have to solve a radiation transport problem in six dimensions (three space plus two angular dimensions plus time). Then as if radiation transport weren’t difficult enough, we need to solve a many-body quantum mechanics problem to evolve the neutrino flavor states.",
    "crumbs": [
      "Neutrino Quantum Kinetics"
    ]
  },
  {
    "objectID": "neutrino_quantum_kinetics.html#neutrino-quantum-flavor-instabilities-play-a-critical-role-requiring-specialized-code",
    "href": "neutrino_quantum_kinetics.html#neutrino-quantum-flavor-instabilities-play-a-critical-role-requiring-specialized-code",
    "title": "Neutrino Quantum Kinetics",
    "section": "",
    "text": "If the quantum mechanics of neutrinos is hard to simulate, we might naturally ask what makes the neutrino quantum flavor state so important in the first place.\nGetting the neutrino quantum state right is important because under certain conditions, theorists have found neutrinos can evolve fast flavor instabilities (FFI). Under FFI conditions, the overall neutrino flavor state very rapidly destabilizes before approaching a completely different equilibrium state over longer timescales.\nThe problem is that these FFI events can occur in volumes of space that would fit into the palm of one’s hand, over timescales measured in just a few nanoseconds. This is far faster than explosion simulations can possibly capture, so we need to write a specialized simulation code just for neutrino quantum kinetics.\nWe can then predict what conditions could lead to FFI and the long term outcomes to provide effective models for larger, more complete simulations of the entire explosion event.",
    "crumbs": [
      "Neutrino Quantum Kinetics"
    ]
  },
  {
    "objectID": "neutrino_quantum_kinetics.html#predicting-neutrino-flavor-in-astrophysics-requires-writing-code-that-combines-radiation-transport-and-quantum-mechanics",
    "href": "neutrino_quantum_kinetics.html#predicting-neutrino-flavor-in-astrophysics-requires-writing-code-that-combines-radiation-transport-and-quantum-mechanics",
    "title": "Neutrino Quantum Kinetics",
    "section": "",
    "text": "We can start by considering what we need to solve the kinetic, transport aspect of neutrino evolution.\nSometimes transport problems are best solved with Lagrangian techniques, which represent the solution as a collection of particles.\nLagrangian techniques are often an efficient choice for simulating transport because a solution made up of uniquely moving particles is one way to reduce certain artificial diffusion errors in Eulerian transport models based on a fixed spatial grid.\nLagrangian particles may interact with each other and with matter or fields extending throughout the simulation domain.\nWhy are Lagrangian methods important? Well, they are exactly what we needed for neutrino quantum kinetics.\nNeutrinos are nearly massless and so move at nearly the speed of light. They carry no electrical charge, but they do carry a quantum state called flavor in particle physics.\nNeutrinos arise in large numbers from core collapse supernovae and neutron star merger events in high-energy astrophysics. In such cases, we naturally model neutrinos as radiation we must transport, so we chose a Lagrangian approach.\nEach Lagrangian particle thus represents a number of physical neutrinos. These physical neutrinos have an average flavor state we represent with a \\(3 \\times 3\\) Hermitian matrix associated with the Lagrangian particle.\nThus, not only must our code transport Lagrangian particles, we must also evolve the flavor state matrix associated with each particle.\nI developed a framework based on AMReX for evolving equations associated with Lagrangian particles using global Runge-Kutta time integration. We generated the C++ code each particle must integrate to evolve its complex-valued flavor state matrix using the Sympy package for symbolic mathematics.\nWhen we consider the dynamics of evolving the neutrino flavor state due to neutrino-neutrino and neutrino-matter interactions, the mean-field approximation seemed a natural choice for solving the complex neutrino quantum kinetics equations.\nWe implemented the mean-field approximation using a background spatial grid where we averaged the surrounding particle quantum flavor states. In turn, we interpolated back from the spatial grid to the particle locations in each spatial cell to calculate the time derivative for the particle flavor state matrix. This technique is called a Particle-In-Cell (PIC) Method.\nOur code generation approach with Runge-Kutta integration for the Particle-In-Cell Method is the framework of the Emu simulation code I developed with Sherwood Richers to solve the six-dimensional neutrino quantum kinetics problem.",
    "crumbs": [
      "Neutrino Quantum Kinetics"
    ]
  },
  {
    "objectID": "neutrino_quantum_kinetics.html#we-created-emu-a-six-dimensional-three-flavor-code-to-solve-neutrino-quantum-kinetics",
    "href": "neutrino_quantum_kinetics.html#we-created-emu-a-six-dimensional-three-flavor-code-to-solve-neutrino-quantum-kinetics",
    "title": "Neutrino Quantum Kinetics",
    "section": "",
    "text": "Get Emu\n\n\n\nEmu is an open-source code, freely available on the Emu GitHub.\nWe also openly published the Emu inputs files anyone could use to reproduce our published work.\n\n\nIn summary, I worked with Sherwood Richers to create Emu, a new simulation code based on the particle-in-cell technique to solve neutrino quantum kinetics in the mean field approximation.\nEmu evolves the neutrino radiation field using Lagrangian particles traveling atop an underlying spatial mesh that contains the mean field quantum many-body state as well as the nuclear matter background.\n\n\nWe started with one-dimension in space, two dimensions in angle, and three neutrino flavors to evaluate the dynamics of FFI under conditions where other simulation codes provided a means of comparison. We published this work in our first Emu paper.\nFor details, see Richers et al. (2021a).\n\n\n\nAfter validating our method and publishing our numerical technique in our first paper, we moved on to the exciting challenge of fully three-dimensional simulations.\nThis time, we wanted to capture all three dimensions of the volume of space neutrinos traversed while undergoing fast flavor instability. We also wanted to simulate all angular directions in which neutrinos could travel over the full instability timescale.\nWe were able to easily discretize these dimensions because we used Lagrangian particles to represent groups of neutrinos located anywhere in our three-dimensional simulation domain and moving in any of two angular directions covering the unit sphere.\nWe then evolved the neutrinos forward in time using Runge-Kutta integration, for a total of 6 dimensions of space, angle, and time.\nOur Emu code enabled us to simulate the neutrino fast flavor instability in all six dimensions with all three neutrino flavor states.\nWe repeated the FFI conditions in our earlier one-dimensional paper, again with all three neutrino flavors and published our work in a follow-up paper.\n\n\n\nEmu 3D FFI Simulation\n\n\nFor details, see Richers et al. (2021b).",
    "crumbs": [
      "Neutrino Quantum Kinetics"
    ]
  },
  {
    "objectID": "thermonuclear_supernovae.html",
    "href": "thermonuclear_supernovae.html",
    "title": "Thermonuclear Supernovae",
    "section": "",
    "text": "I started out my astrophysics career simulating deflagrations and detonations in “hybrid” white dwarf stars. The typical white dwarf (WD) star is within about forty percent give or take from our own sun’s mass, made up of the elements carbon and oxygen, all compacted down to the size of our Earth. Hybrid white dwarfs are so called because they are hypothetically composed of carbon, oxygen, and neon. I wanted to discover whether runaway thermonuclear fusion in such hybrid white dwarf stars could possibly generate Type Ia supernovae.\nType Ia supernovae (SNIa) are extremely bright explosions of white dwarf stars. Yet SNIa are very rare, only occurring about twice a century in a typical galaxy. We can observe SNIa from distant galaxies, however, because in the aftermath of runaway thermonuclear fusion, the explosion of a single SNIa is briefly brighter than its entire galaxy. Astrophysicists used SNIa to measure distances to faraway galaxies and their velocities compared to our Milky Way galaxy. They found that the Universe was not only expanding but also mysteriously accelerating outwards over time, as if powered by an unknown form of energy they labeled “Dark Energy.”\nBut what if unexpected types of stars could undergo thermonuclear runaway and appear to be SNIa but differ in subtle ways to corrupt our measurements of the Universe’s acceleration?\nPerhaps investigating this possibility will help us figure out Dark Energy.\nThis thinking motivated my first astrophysics research paper where I used computer simulations to estimate whether “hybrid” carbon-oxygen-neon white dwarf stars could undergo thermonuclear runaway like SNIa from pure carbon-oxygen white dwarf stars. In other words, could “hybrid” white dwarf stars produce impostor SNIa events?\n\n\n\nProgress of the burning front into the stellar core for one simulated hybrid C-O-Ne white dwarf.\n\n\nI found that while the explosion dynamics from hybrid white dwarf stars were similar to explosions from typical white dwarf stars, hybrids were unlikely to generate impostor SNIa.\nThis might be reassuring from a cosmological perspective, but why don’t hybrid white dwarf stars explode like ordinary white dwarf stars?\nI found the key explanation for this finding lies in the evolutionary history for hybrid white dwarfs. The hybrid white dwarf hypothesis requires that earlier in the lifecycle of these stars, they partially burned their carbon to produce neon. By trading carbon for neon, hybrid white dwarfs have less nuclear potential energy available to power the final, explosive thermonuclear runaway. Lower nuclear potential energy at the start of thermonuclear runaway than an equal mass carbon and oxygen white dwarf means thermonuclear runaways from hybrids will on average generate lower kinetic and radiative energy. In other words, explosions from hybrid white dwarfs will be significantly dimmer than explosions from typical white dwarfs.\nFor details, see Willcox et al. (2016).\nFor a brief overview of the scientific context for white dwarf research, see Calder et al. (2017).\n\n\n\nI moved my primary focus to other astrophysics topics, but I still collaborated with Dean Townsley, Alan Calder, and Carlyn Augustine to advance hybrid white dwarf research. We wished to examine whether convective mixing during earlier stages of hybrid carbon, oxygen, neon white dwarf stellar history would change my earlier findings. We found that mixed carbon, oxygen, neon hybrid white dwarfs compared to carbon and oxygen white dwarfs remained likely dimmer and less energetic when undergoing thermonuclear runaway.\n\n\n\nEstimated Nickel-56 mass produced by mixed, hybrid Carbon-Oxygen-Neon white dwarf models.\n\n\nOur new result was largely consistent with my earlier findings, but it was still important to check thoroughly. Nuances just like this can sometimes have surprising effects.\nFor details, see Augustine et al. (2019).\n\n\n\nMore recently, Catherine Feldman followed up on our earlier hybrid white dwarf research by investigating the potential of hybrid white dwarf stars to produce dimmer Type Iax supernovae.\nAs before, I assisted our collaboration with explaining my original method and providing feedback to the research.\nThis Iax hypothesis was motivated by recognizing that all our earlier thermonuclear runaway simulations modeled our best understanding for producing bright Type Ia supernovae from single white dwarf stars. To simulate SNIa events from single white dwarf stars, we used a deflagration-to-detonation transition model to rapidly burn carbon fuel all the way to nuclear statistical equilibrium at the iron peak.\nSNIa are known to produce elements as heavy as iron but not much heavier, that is to say, SNIa do not produce elements with much larger atomic mass on the periodic table of elements. This pattern is typical for thermonuclear fusion and it is a natural consequence of the exceptional stability of atomic elements around the mass of iron.\nType Iax supernovae are, however, dimmer than SNIa. If they come from white dwarf stars, then it is possible they simply did not completely burn all their initial carbon fuel to produce heavy elements. This would result in lower energy generation available to power explosive ejecta and observed radiation. Catherine wanted to find out whether the hypothesized carbon, oxygen, neon hybrid white dwarfs could explain Type Iax observations.\nThis time, instead of simulating explosions with a deflagration-to-detonation transition model during thermonuclear runaway, Catherine simulated pure deflagration in hybrid white dwarfs to allow for significant incomplete nucleosynthesis.\n\n\n\nDensity profiles of thermonuclear supernova simulations from initial Carbon-Oxygen-Neon white dwarfs generating least (left) and most (right) Nickel-56.\n\n\nSimulations showed in most cases, deflagrations in hybrid carbon-oxygen-neon white dwarf stars produced \\(\\textup{Ni}^{56}\\) in comparable quantities to observational inferences from Type Iax supernovae. Deflagrations in hybrids, however, tended to produce lower ejecta masses and kinetic energies than observers infer.\nFor complete details, see Feldman et al. (2023).",
    "crumbs": [
      "Thermonuclear Supernovae"
    ]
  },
  {
    "objectID": "thermonuclear_supernovae.html#thermonuclear-supernovae-from-hybrid-white-dwarf-stars",
    "href": "thermonuclear_supernovae.html#thermonuclear-supernovae-from-hybrid-white-dwarf-stars",
    "title": "Thermonuclear Supernovae",
    "section": "",
    "text": "I started out my astrophysics career simulating deflagrations and detonations in “hybrid” white dwarf stars. The typical white dwarf (WD) star is within about forty percent give or take from our own sun’s mass, made up of the elements carbon and oxygen, all compacted down to the size of our Earth. Hybrid white dwarfs are so called because they are hypothetically composed of carbon, oxygen, and neon. I wanted to discover whether runaway thermonuclear fusion in such hybrid white dwarf stars could possibly generate Type Ia supernovae.\nType Ia supernovae (SNIa) are extremely bright explosions of white dwarf stars. Yet SNIa are very rare, only occurring about twice a century in a typical galaxy. We can observe SNIa from distant galaxies, however, because in the aftermath of runaway thermonuclear fusion, the explosion of a single SNIa is briefly brighter than its entire galaxy. Astrophysicists used SNIa to measure distances to faraway galaxies and their velocities compared to our Milky Way galaxy. They found that the Universe was not only expanding but also mysteriously accelerating outwards over time, as if powered by an unknown form of energy they labeled “Dark Energy.”\nBut what if unexpected types of stars could undergo thermonuclear runaway and appear to be SNIa but differ in subtle ways to corrupt our measurements of the Universe’s acceleration?\nPerhaps investigating this possibility will help us figure out Dark Energy.\nThis thinking motivated my first astrophysics research paper where I used computer simulations to estimate whether “hybrid” carbon-oxygen-neon white dwarf stars could undergo thermonuclear runaway like SNIa from pure carbon-oxygen white dwarf stars. In other words, could “hybrid” white dwarf stars produce impostor SNIa events?\n\n\n\nProgress of the burning front into the stellar core for one simulated hybrid C-O-Ne white dwarf.\n\n\nI found that while the explosion dynamics from hybrid white dwarf stars were similar to explosions from typical white dwarf stars, hybrids were unlikely to generate impostor SNIa.\nThis might be reassuring from a cosmological perspective, but why don’t hybrid white dwarf stars explode like ordinary white dwarf stars?\nI found the key explanation for this finding lies in the evolutionary history for hybrid white dwarfs. The hybrid white dwarf hypothesis requires that earlier in the lifecycle of these stars, they partially burned their carbon to produce neon. By trading carbon for neon, hybrid white dwarfs have less nuclear potential energy available to power the final, explosive thermonuclear runaway. Lower nuclear potential energy at the start of thermonuclear runaway than an equal mass carbon and oxygen white dwarf means thermonuclear runaways from hybrids will on average generate lower kinetic and radiative energy. In other words, explosions from hybrid white dwarfs will be significantly dimmer than explosions from typical white dwarfs.\nFor details, see Willcox et al. (2016).\nFor a brief overview of the scientific context for white dwarf research, see Calder et al. (2017).",
    "crumbs": [
      "Thermonuclear Supernovae"
    ]
  },
  {
    "objectID": "thermonuclear_supernovae.html#thermonuclear-supernovae-from-convectively-mixed-hybrid-white-dwarf-stars",
    "href": "thermonuclear_supernovae.html#thermonuclear-supernovae-from-convectively-mixed-hybrid-white-dwarf-stars",
    "title": "Thermonuclear Supernovae",
    "section": "",
    "text": "I moved my primary focus to other astrophysics topics, but I still collaborated with Dean Townsley, Alan Calder, and Carlyn Augustine to advance hybrid white dwarf research. We wished to examine whether convective mixing during earlier stages of hybrid carbon, oxygen, neon white dwarf stellar history would change my earlier findings. We found that mixed carbon, oxygen, neon hybrid white dwarfs compared to carbon and oxygen white dwarfs remained likely dimmer and less energetic when undergoing thermonuclear runaway.\n\n\n\nEstimated Nickel-56 mass produced by mixed, hybrid Carbon-Oxygen-Neon white dwarf models.\n\n\nOur new result was largely consistent with my earlier findings, but it was still important to check thoroughly. Nuances just like this can sometimes have surprising effects.\nFor details, see Augustine et al. (2019).",
    "crumbs": [
      "Thermonuclear Supernovae"
    ]
  },
  {
    "objectID": "thermonuclear_supernovae.html#deflagrations-from-convectively-mixed-hybrid-white-dwarf-stars",
    "href": "thermonuclear_supernovae.html#deflagrations-from-convectively-mixed-hybrid-white-dwarf-stars",
    "title": "Thermonuclear Supernovae",
    "section": "",
    "text": "More recently, Catherine Feldman followed up on our earlier hybrid white dwarf research by investigating the potential of hybrid white dwarf stars to produce dimmer Type Iax supernovae.\nAs before, I assisted our collaboration with explaining my original method and providing feedback to the research.\nThis Iax hypothesis was motivated by recognizing that all our earlier thermonuclear runaway simulations modeled our best understanding for producing bright Type Ia supernovae from single white dwarf stars. To simulate SNIa events from single white dwarf stars, we used a deflagration-to-detonation transition model to rapidly burn carbon fuel all the way to nuclear statistical equilibrium at the iron peak.\nSNIa are known to produce elements as heavy as iron but not much heavier, that is to say, SNIa do not produce elements with much larger atomic mass on the periodic table of elements. This pattern is typical for thermonuclear fusion and it is a natural consequence of the exceptional stability of atomic elements around the mass of iron.\nType Iax supernovae are, however, dimmer than SNIa. If they come from white dwarf stars, then it is possible they simply did not completely burn all their initial carbon fuel to produce heavy elements. This would result in lower energy generation available to power explosive ejecta and observed radiation. Catherine wanted to find out whether the hypothesized carbon, oxygen, neon hybrid white dwarfs could explain Type Iax observations.\nThis time, instead of simulating explosions with a deflagration-to-detonation transition model during thermonuclear runaway, Catherine simulated pure deflagration in hybrid white dwarfs to allow for significant incomplete nucleosynthesis.\n\n\n\nDensity profiles of thermonuclear supernova simulations from initial Carbon-Oxygen-Neon white dwarfs generating least (left) and most (right) Nickel-56.\n\n\nSimulations showed in most cases, deflagrations in hybrid carbon-oxygen-neon white dwarf stars produced \\(\\textup{Ni}^{56}\\) in comparable quantities to observational inferences from Type Iax supernovae. Deflagrations in hybrids, however, tended to produce lower ejecta masses and kinetic energies than observers infer.\nFor complete details, see Feldman et al. (2023).",
    "crumbs": [
      "Thermonuclear Supernovae"
    ]
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research Highlights",
    "section": "",
    "text": "Research Highlights\nMy research career in computational science spans a wide variety of computational projects in the physical sciences.\nRead on for a brief selection of research highlights over my career.\nOver the years, each of these research topics succeeded only because I have been so fortunate to work with many amazing collaborators and scientific mentors.\n\n\n\n\n Back to top",
    "crumbs": [
      "Research Highlights"
    ]
  },
  {
    "objectID": "ml_reactions.html",
    "href": "ml_reactions.html",
    "title": "Machine Learning For Surrogate Models",
    "section": "",
    "text": "Machine Learning For Surrogate Models\n\n\n\n\n\n\nGet MAESTROeX\n\n\n\nOur flames with surrogate ML models used our low-Mach hydrodynamics code MAESTROeX.\nMAESTROeX is an open-source code, freely available on the MAESTROeX GitHub.\n\n\nNuclear reactions are computationally intensive!\nAfter working to accelerate our reaction solvers on GPUs, I saw the great utility of machine learning for assisting PDE solvers and started a project to address an important niche question the astrophysics community had not yet researched.\nWhat if we could replace expensive, time-consuming reaction network solvers with good approximate surrogate models using machine learning?\nIf successful, ML surrogate techniques could drastically speed up the most time-intensive reaction physics module in nearly all explosive astrophysics simulations.\nWhy?\nWell, in high-energy nuclear astrophysics (think supernovae and neutron star mergers), turbulence, radiation, and nuclear reactions drive the dynamics. Yet, especially in the reaction physics case, these equations mathematically generate stiff nonlinearities where we must focus computational intensity to solve with acceptable accuracy. Approximate methods can be wildly wrong!\nPhysics-informed neural networks (PINNs) are promising but the equations we must solve for reaction physics are not only nonlinear but extremely stiff. In mathematical terms, when we construct a linear approximation to the full equations, the ratio of Jacobian elements can be greater than twenty orders of magnitude for explosive burning simulations. This makes the gradient error functions in PINNs quite difficult to use for training surrogate models over a large enough dynamic range to capture a complete burning model.\nWe thus started our research with a simpler forward neural network and found we needed a recurrent neural network for gradient descent to train the network effectively. We studied simple laminar flame models to start out instead of going straight to turbulent flame modeling.\nOur first paper thus demonstrated a successful proof-of-concept method for nuclear reaction surrogate modeling.\nFor details, see Fan et al. (2022).\nI’m eager to extend our initial work to explosive astrophysics by expanding the training dataset to a more comprehensive flame model. In addition, there are many follow-up questions for investigating alternate neural network structures and training techniques to better incorporate reaction physics constraints.\n\n\n\n\n\n Back to topReferences\n\nFan, D., Willcox, D. E., DeGrendele, C., Zingale, M., & Nonaka, A. 2022, ApJ, 940, 134, https://iopscience.iop.org/article/10.3847/1538-4357/ac9a4b",
    "crumbs": [
      "Machine Learning For Surrogate Models"
    ]
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "When I started college in 2007, I set out inspired to figure out how the world works.\nMy quest naturally ventured into engineering, then physics and computation, always finding more to learn even after completing graduate school in 2018.\nNow as a physicist and computational scientist, I use computer algorithms to research the world around us.\nI like working on open-source scientific codes and openly publishing my findings whenever possible because I have, in turn, learned quite a lot from open-access research papers and public codes.\nSimilarly, I enjoy teaching, advising, and giving public talks so I can make science accessible for others just as my many academic and research mentors have done for me over the years.\nWhat follows is a brief overview of my journey and research career so far.\n\n\n\n2022-2024: Project Scientist, Center for Computational Sciences and Engineering\n2018-2022: Postdoctoral Researcher, Center for Computational Sciences and Engineering\n\nApplied Mathematics and Computational Research Division\nLawrence Berkeley National Laboratory\n1 Cyclotron Road Mailstop 50A3111\nBerkeley, CA 94720\n\n\n\n\n\n\nStony Brook University - Stony Brook, NY, USA\n\nPh.D., Physics, August 2018\n\nLeTourneau University - Longview, TX, USA\n\nB.S., Engineering Physics, May 2011\nB.S., Electrical Engineering, May 2011\nMinors: Mathematics, Applied Sciences\n\n\n\n\n\n\n2011 - 2018: Turner Fellow, Stony Brook University Center for Inclusive Education\n2007 - 2011: Heritage Scholarship, LeTourneau University\n\n\n\n\n\n2019: Participated in GPU Hackathon organized by NERSC\n2018: Participated in GPU Hackathon at Brookhaven National Laboratory\n2018: Participated in GPU Hackathon at University of Colorado, Boulder\n2018: Achieved Software Carpentry instructor certification\n2017: Participated in GPU Hackathon at Brookhaven National Laboratory\n2016: Participated in GPU Hackathon hosted by the Oak Ridge Leadership Computing Facility\n2015: Participated in GPU Hackathon hosted by the Oak Ridge Leadership Computing Facility\n2015: Studied at the Argonne Training Program on Extreme-Scale Computing\n2014: Studied at the MESA Summer School for simulating massive stars, accreting white dwarfs, stellar mixing processes and more at UC Santa Barbara\n2014: Studied at the JINA TALENT Course on Nuclear Theory for Astrophysics at Michigan State University\n\n\n\n\n\n\n\n\n2023: (Partially Funded) Bioreactor digital twinning - Accelerating bioprocess scaling by combining computational fluid dynamics with metabolic modeling\n\nrole: Principal Investigator\ncollaborators: Co-Investigator Hector Garcia Martin (LBNL, Biosciences Area)\ninstitution: Berkeley Lab FY 2024 Multi-Area LDRD\n\n2023: (Not Funded) Advancing AMR-Wind Turbine Simulations With Machine Learning\n\nrole: Principal Investigator\ncollaborators: Co-Investigators Adam Lavely (LBNL) and Ganesh Vijayakumar (NREL)\ninstitution: DOE Wind Energy Technologies Office\n\n2023: (Not Funded) Artificial Intelligence for Multiscale Wind Modeling with the ERF Simulation Code\n\nrole: Principal Investigator\ninstitution: DOE Wind Energy Technologies Office\n\n\n\n\n\n\n2023: Co-Investigator, INCITE 2023 award, Exascale Models of Astrophysical Thermonuclear Explosions (Awarded: 400 k node-hours on Summit, 300 k node-hours on Frontier, 100 k node-hours on Polaris)\n2022: Co-Investigator, INCITE 2022 award at OLCF, Approaching Exascale Models of Astrophysical Explosions (Awarded: 590 k node-hours on Summit)\n2021: Senior Investigator, NERSC 2021 Allocation, Three-dimensional studies of white dwarfs, massive stars, and neutron star systems (Awarded: 30 M MPP hours)\n2021: Senior Investigator, NERSC 2021 Allocation, Neutrino Flavor Transformation in Neutron Star Mergers (Awarded: 18 M MPP hours)\n2021: Senior Investigator, NERSC 2021 Allocation, Astrophysics of Supernova Progenitors (Awarded: 13 M MPP hours)\n2020: Senior Investigator, NERSC 2020 Allocation, Three-dimensional studies of white dwarfs, massive stars, and neutron star systems (Awarded: 30 M MPP hours)\n2019-2020: Co-Investigator, INCITE 2019 award at OLCF, Approaching Exascale Models of Astrophysical Explosions (Awarded 2019: 1.5 M node-hours on Titan, 105 k node-hours on Summit; Awarded 2020: 300 k node-hours on Summit)\n2018: Senior Investigator, NERSC 2018 Allocation, Three-dimensional studies of white dwarf and neutron star systems (Awarded: 20.8 M MPP hours)\n2018: Co-Investigator, INCITE 2018 award at OLCF, Approaching Exascale Models of Astrophysical Explosions (Awarded: 40 Mh)\n\n\n\n\n\n2022-2024: Core developer of the ERF simulation code for large-scale (ie. mesoscopic) weather modeling\n\nhttps://github.com/erf-model/erf\n\n2019-present: Co-creator of the Emu simulation code for astrophysical neutrino quantum kinetics in 6-dimensional phase space\n\nhttps://github.com/AMReX-Astro/Emu\n\n2019-present: Co-creator of the STvAR Eulerian code generation framework for solving PDEs on adaptive meshes.\n\nhttps://github.com/AMReX-Astro/STvAR\n\n2018-present: Core developer of the Castro simulation code for astrophysical radiation-hydrodynamics on adaptive meshes\n\nhttps://github.com/amrex-astro/Castro\n\n2017-present: Co-creator of the StarSTRUQ github organization for publicly-available code implementing uncertainty quantification algorithms useful for stellar evolution calculations\n\nhttps://github.com/StarSTRUQ\n\n2016-present: Co-creator of pynucastro, a publicly-available Python interface to the JINA Reaclib nuclear reaction rate database for rate visualization and ODE right hand side code generation in Python and C++\n\nhttps://github.com/pynucastro/pynucastro\n\n2015-present: Core developer of the StarKiller Microphysics code, a collection of publicly-available astrophysical microphysics routines and nuclear reaction network integrators\n\nhttps://github.com/starkiller-astro/Microphysics\n\n\n\n\n\n\n2019–2021: Eloise Yang\n\nCo-mentor for LBNL intern\n\n2020–2021: Nicole Ford\n\nAssociate mentor for Fall 2020 & Spring 2021 DOE SULI intern at LBNL\n\nSummer 2021: Chris Degrendele\n\nMentor for NSF MSGI intern at LBNL\n\nSummer 2020: Chris Degrendele\n\nMentor for LBNL summer intern\n\nSummer 2020: Ty Frazier\n\nMentor for NSF MSGI intern at LBNL\n\nSummer 2019: Chris Degrendele\n\nCo-mentor for LBNL summer intern\n\nSummer 2019: Kiran Eiden\n\nCo-mentor for LBNL summer intern\n\n\n\n\n\n\nongoing: Referee for the Astrophysical Journal\nongoing: Referee for Communications in Applied Mathematics and Computational Science\n2021: Organizer for SIAM CSE 2021 Minisymposium MS137: Machine Learning Approaches in Computational Astrophysics and Cosmology\n\n\n\n\n\n\n\n\nSpring 2022: Volunteer Judge for Oakland Unified School District Elementary Science Fair\n10/20/2020: Panelist at CAUSE Career Panel, University of Minnesota\n06/18/2019: How to Simulate a Thermonuclear Supernova - public talk at the Berkeley Public Library\n01/2019: Judge for Chambliss poster competition at the 233rd Meeting of the American Astronomical Society\n02/21/2018: Saturn in 13 Years: the Cassini-Huygens Mission - public talk at the Astronomical Society of Long Island, Vanderbilt Museum and Planetarium\n11/03/2017: Saturn in 13 Years: the Cassini-Huygens Mission - public talk in the Astronomy Open Night Series, Stony Brook University\n\n\n\n\n\nLawrence Berkeley National Laboratory\n\n2019,2020,2021: ATPESC Lecturer Support Staff\n\nDesigned and presented hands-on exercises for the AMReX code at the Argonne Training Program on Extreme-Scale Computing.\n\n\nStony Brook University\n\nSpring 2017: WISE Computational Astrophysics\n\nCo-instructor for a computational astrophysics course for the Women In Science and Engineering program.\n\nSummer 2015: IACS Computes!\n\nTeaching assistant for a Python programming workshop for high school students by the Institute for Advanced Computational Sciences.\n\nSpring 2014: Astronomy\n\nTeaching assistant for an undergraduate astronomy course.\n\nSpring 2013: Modern Physics\n\nTeaching assistant instructor for an undergraduate laboratory on relativity and quantum mechanics.\n\nSummer 2012: Introduction to Calculus II\n\nInstructor for a 3-week course on integral calculus for incoming freshman students.\n\n2012: Introductory Physics\n\nTeaching assistant instructor for undergraduate laboratory on electricity and magnetism.\n\n\nLeTourneau University\n\nFall, 2008-2010: Electricity and Magnetism\n\nRecitation instructor for undergraduates taking the physics course on electricity and magnetism.\n\nSpring 2010: Classical Mechanics\n\nRecitation instructor for undergraduates taking the physics course on classical mechanics."
  },
  {
    "objectID": "cv.html#most-recent-position",
    "href": "cv.html#most-recent-position",
    "title": "CV",
    "section": "",
    "text": "2022-2024: Project Scientist, Center for Computational Sciences and Engineering\n2018-2022: Postdoctoral Researcher, Center for Computational Sciences and Engineering\n\nApplied Mathematics and Computational Research Division\nLawrence Berkeley National Laboratory\n1 Cyclotron Road Mailstop 50A3111\nBerkeley, CA 94720"
  },
  {
    "objectID": "cv.html#academics",
    "href": "cv.html#academics",
    "title": "CV",
    "section": "",
    "text": "Stony Brook University - Stony Brook, NY, USA\n\nPh.D., Physics, August 2018\n\nLeTourneau University - Longview, TX, USA\n\nB.S., Engineering Physics, May 2011\nB.S., Electrical Engineering, May 2011\nMinors: Mathematics, Applied Sciences\n\n\n\n\n\n\n2011 - 2018: Turner Fellow, Stony Brook University Center for Inclusive Education\n2007 - 2011: Heritage Scholarship, LeTourneau University\n\n\n\n\n\n2019: Participated in GPU Hackathon organized by NERSC\n2018: Participated in GPU Hackathon at Brookhaven National Laboratory\n2018: Participated in GPU Hackathon at University of Colorado, Boulder\n2018: Achieved Software Carpentry instructor certification\n2017: Participated in GPU Hackathon at Brookhaven National Laboratory\n2016: Participated in GPU Hackathon hosted by the Oak Ridge Leadership Computing Facility\n2015: Participated in GPU Hackathon hosted by the Oak Ridge Leadership Computing Facility\n2015: Studied at the Argonne Training Program on Extreme-Scale Computing\n2014: Studied at the MESA Summer School for simulating massive stars, accreting white dwarfs, stellar mixing processes and more at UC Santa Barbara\n2014: Studied at the JINA TALENT Course on Nuclear Theory for Astrophysics at Michigan State University"
  },
  {
    "objectID": "cv.html#research",
    "href": "cv.html#research",
    "title": "CV",
    "section": "",
    "text": "2023: (Partially Funded) Bioreactor digital twinning - Accelerating bioprocess scaling by combining computational fluid dynamics with metabolic modeling\n\nrole: Principal Investigator\ncollaborators: Co-Investigator Hector Garcia Martin (LBNL, Biosciences Area)\ninstitution: Berkeley Lab FY 2024 Multi-Area LDRD\n\n2023: (Not Funded) Advancing AMR-Wind Turbine Simulations With Machine Learning\n\nrole: Principal Investigator\ncollaborators: Co-Investigators Adam Lavely (LBNL) and Ganesh Vijayakumar (NREL)\ninstitution: DOE Wind Energy Technologies Office\n\n2023: (Not Funded) Artificial Intelligence for Multiscale Wind Modeling with the ERF Simulation Code\n\nrole: Principal Investigator\ninstitution: DOE Wind Energy Technologies Office\n\n\n\n\n\n\n2023: Co-Investigator, INCITE 2023 award, Exascale Models of Astrophysical Thermonuclear Explosions (Awarded: 400 k node-hours on Summit, 300 k node-hours on Frontier, 100 k node-hours on Polaris)\n2022: Co-Investigator, INCITE 2022 award at OLCF, Approaching Exascale Models of Astrophysical Explosions (Awarded: 590 k node-hours on Summit)\n2021: Senior Investigator, NERSC 2021 Allocation, Three-dimensional studies of white dwarfs, massive stars, and neutron star systems (Awarded: 30 M MPP hours)\n2021: Senior Investigator, NERSC 2021 Allocation, Neutrino Flavor Transformation in Neutron Star Mergers (Awarded: 18 M MPP hours)\n2021: Senior Investigator, NERSC 2021 Allocation, Astrophysics of Supernova Progenitors (Awarded: 13 M MPP hours)\n2020: Senior Investigator, NERSC 2020 Allocation, Three-dimensional studies of white dwarfs, massive stars, and neutron star systems (Awarded: 30 M MPP hours)\n2019-2020: Co-Investigator, INCITE 2019 award at OLCF, Approaching Exascale Models of Astrophysical Explosions (Awarded 2019: 1.5 M node-hours on Titan, 105 k node-hours on Summit; Awarded 2020: 300 k node-hours on Summit)\n2018: Senior Investigator, NERSC 2018 Allocation, Three-dimensional studies of white dwarf and neutron star systems (Awarded: 20.8 M MPP hours)\n2018: Co-Investigator, INCITE 2018 award at OLCF, Approaching Exascale Models of Astrophysical Explosions (Awarded: 40 Mh)\n\n\n\n\n\n2022-2024: Core developer of the ERF simulation code for large-scale (ie. mesoscopic) weather modeling\n\nhttps://github.com/erf-model/erf\n\n2019-present: Co-creator of the Emu simulation code for astrophysical neutrino quantum kinetics in 6-dimensional phase space\n\nhttps://github.com/AMReX-Astro/Emu\n\n2019-present: Co-creator of the STvAR Eulerian code generation framework for solving PDEs on adaptive meshes.\n\nhttps://github.com/AMReX-Astro/STvAR\n\n2018-present: Core developer of the Castro simulation code for astrophysical radiation-hydrodynamics on adaptive meshes\n\nhttps://github.com/amrex-astro/Castro\n\n2017-present: Co-creator of the StarSTRUQ github organization for publicly-available code implementing uncertainty quantification algorithms useful for stellar evolution calculations\n\nhttps://github.com/StarSTRUQ\n\n2016-present: Co-creator of pynucastro, a publicly-available Python interface to the JINA Reaclib nuclear reaction rate database for rate visualization and ODE right hand side code generation in Python and C++\n\nhttps://github.com/pynucastro/pynucastro\n\n2015-present: Core developer of the StarKiller Microphysics code, a collection of publicly-available astrophysical microphysics routines and nuclear reaction network integrators\n\nhttps://github.com/starkiller-astro/Microphysics\n\n\n\n\n\n\n2019–2021: Eloise Yang\n\nCo-mentor for LBNL intern\n\n2020–2021: Nicole Ford\n\nAssociate mentor for Fall 2020 & Spring 2021 DOE SULI intern at LBNL\n\nSummer 2021: Chris Degrendele\n\nMentor for NSF MSGI intern at LBNL\n\nSummer 2020: Chris Degrendele\n\nMentor for LBNL summer intern\n\nSummer 2020: Ty Frazier\n\nMentor for NSF MSGI intern at LBNL\n\nSummer 2019: Chris Degrendele\n\nCo-mentor for LBNL summer intern\n\nSummer 2019: Kiran Eiden\n\nCo-mentor for LBNL summer intern\n\n\n\n\n\n\nongoing: Referee for the Astrophysical Journal\nongoing: Referee for Communications in Applied Mathematics and Computational Science\n2021: Organizer for SIAM CSE 2021 Minisymposium MS137: Machine Learning Approaches in Computational Astrophysics and Cosmology"
  },
  {
    "objectID": "cv.html#outreach-and-teaching",
    "href": "cv.html#outreach-and-teaching",
    "title": "CV",
    "section": "",
    "text": "Spring 2022: Volunteer Judge for Oakland Unified School District Elementary Science Fair\n10/20/2020: Panelist at CAUSE Career Panel, University of Minnesota\n06/18/2019: How to Simulate a Thermonuclear Supernova - public talk at the Berkeley Public Library\n01/2019: Judge for Chambliss poster competition at the 233rd Meeting of the American Astronomical Society\n02/21/2018: Saturn in 13 Years: the Cassini-Huygens Mission - public talk at the Astronomical Society of Long Island, Vanderbilt Museum and Planetarium\n11/03/2017: Saturn in 13 Years: the Cassini-Huygens Mission - public talk in the Astronomy Open Night Series, Stony Brook University\n\n\n\n\n\nLawrence Berkeley National Laboratory\n\n2019,2020,2021: ATPESC Lecturer Support Staff\n\nDesigned and presented hands-on exercises for the AMReX code at the Argonne Training Program on Extreme-Scale Computing.\n\n\nStony Brook University\n\nSpring 2017: WISE Computational Astrophysics\n\nCo-instructor for a computational astrophysics course for the Women In Science and Engineering program.\n\nSummer 2015: IACS Computes!\n\nTeaching assistant for a Python programming workshop for high school students by the Institute for Advanced Computational Sciences.\n\nSpring 2014: Astronomy\n\nTeaching assistant for an undergraduate astronomy course.\n\nSpring 2013: Modern Physics\n\nTeaching assistant instructor for an undergraduate laboratory on relativity and quantum mechanics.\n\nSummer 2012: Introduction to Calculus II\n\nInstructor for a 3-week course on integral calculus for incoming freshman students.\n\n2012: Introductory Physics\n\nTeaching assistant instructor for undergraduate laboratory on electricity and magnetism.\n\n\nLeTourneau University\n\nFall, 2008-2010: Electricity and Magnetism\n\nRecitation instructor for undergraduates taking the physics course on electricity and magnetism.\n\nSpring 2010: Classical Mechanics\n\nRecitation instructor for undergraduates taking the physics course on classical mechanics."
  },
  {
    "objectID": "bio.html",
    "href": "bio.html",
    "title": "Bio",
    "section": "",
    "text": "Me pictured with NERSC’s Cori supercomputer in 2017.\n\n\nHi! I’m Don Willcox, a computational physicist.\nThanks for stopping by, if you would like to get in touch, contact me at eugene.willcox@gmail.com.\n\n\nMost recently, I worked as a project scientist in the Center for Computational Sciences and Engineering (CCSE).\nCCSE is a computational science research group within the Applied Mathematics and Computational Research Division at Berkeley Lab.\nMy research in computational astrophysics includes algorithms for nuclear burning, solving PDEs on adaptive meshes, and neutrino quantum kinetics. I also develop methods for accelerating these algorithms for GPU-based supercomputers. Most recently, I’ve also worked on mesoscale atmospheric modeling as part of the Energy Research and Forecasting (ERF) project.\nNowadays, I’m interested in adaptively accurate methods for multiphysics modules in the large-scale codes I have developed.\nI’m also interested in using forward simulations and data science together with machine learning to more efficiently answer inverse scientific questions.\nTo learn more about my research interests, see my What’s Next? research page.\nBefore joining Berkeley Lab, I completed my PhD in Physics at Stony Brook University in August 2018.\nMy PhD thesis used the FLASH code to simulate thermonuclear supernovae from novel hybrid white dwarf stars. I also designed reacting-hydrodynamics simulations with the MAESTRO code to quantify nuclear energy transport by the convective Urca process in carbon-oxygen white dwarf supernovae progenitors.\nFor information about my research, see my Research pages.\nI enjoy collaborating with other scientists as well as helping train graduate and undergraduate researchers in computational science methods.\nFor a list of student interns I’ve advised at LBNL, see the Research Advising section of my CV.\nOpportunities for scientific outreach are also meaningful to me because many professors and research advisors have invested their time and energy to make me the scientist I am today. Recognizing I stand on their shoulders inspires me to give back to the scientific community and public.\nWhen I’m not doing science, I enjoy reading science fiction and trying to cook new recipes. Sometimes I even take walks outside when I’m especially ambitious!"
  },
  {
    "objectID": "bio.html#about-me",
    "href": "bio.html#about-me",
    "title": "Bio",
    "section": "",
    "text": "Most recently, I worked as a project scientist in the Center for Computational Sciences and Engineering (CCSE).\nCCSE is a computational science research group within the Applied Mathematics and Computational Research Division at Berkeley Lab.\nMy research in computational astrophysics includes algorithms for nuclear burning, solving PDEs on adaptive meshes, and neutrino quantum kinetics. I also develop methods for accelerating these algorithms for GPU-based supercomputers. Most recently, I’ve also worked on mesoscale atmospheric modeling as part of the Energy Research and Forecasting (ERF) project.\nNowadays, I’m interested in adaptively accurate methods for multiphysics modules in the large-scale codes I have developed.\nI’m also interested in using forward simulations and data science together with machine learning to more efficiently answer inverse scientific questions.\nTo learn more about my research interests, see my What’s Next? research page.\nBefore joining Berkeley Lab, I completed my PhD in Physics at Stony Brook University in August 2018.\nMy PhD thesis used the FLASH code to simulate thermonuclear supernovae from novel hybrid white dwarf stars. I also designed reacting-hydrodynamics simulations with the MAESTRO code to quantify nuclear energy transport by the convective Urca process in carbon-oxygen white dwarf supernovae progenitors.\nFor information about my research, see my Research pages.\nI enjoy collaborating with other scientists as well as helping train graduate and undergraduate researchers in computational science methods.\nFor a list of student interns I’ve advised at LBNL, see the Research Advising section of my CV.\nOpportunities for scientific outreach are also meaningful to me because many professors and research advisors have invested their time and energy to make me the scientist I am today. Recognizing I stand on their shoulders inspires me to give back to the scientific community and public.\nWhen I’m not doing science, I enjoy reading science fiction and trying to cook new recipes. Sometimes I even take walks outside when I’m especially ambitious!"
  },
  {
    "objectID": "codes.html",
    "href": "codes.html",
    "title": "Computational Science Software",
    "section": "",
    "text": "As a computational scientist, I use the tools of computation to investigate novel scientific questions.\nUsually, one can combine existing scientific software libraries in a new code to advance computational research.\nSometimes, existing software does not quite match our current needs, and we find ourselves having to write our own code from scratch.\nIn any case, I like to make my scientific codes freely available as open-source software.\nNot only have I relied on open source software for my scientific discoveries but also open software lets anyone reading my research easily look up the exact code I used.\nWherever possible, I like to show all my work, it’s just that simple.\n\n\nHere are some of the open source scientific codes I have either created with my collaborators or contributed to as a developer in the course of my research.\n\n\n\nMesoscale weather modeling\nAdaptive mesh refinement\nComplex terrain modeling\nWater cycle modeling (precipitation, evaporation, condensation)\nFor details, see the Energy Research and Forecasting page\nAvailable at the ERF GitHub\n\n\n\n\n\n“Quantum” in evolving the neutrino flavor state\n“Kinetics” in transporting neutrino radiation\nLagrangian representation for neutrinos\nParticle-In-Cell method for mean-field neutrino interactions\nFully six-dimensional (three space, two angle, and time)\nSymbolic code generation supports two or three neutrino flavor states\nFor details, see the Neutrino Quantum Kinetics page\nAvailable at the Emu GitHub\n\n\n\n\n\nEulerian PDE solver method\nFinite differencing for spatial derivatives up to fourth order\nMethod of Lines with Runge-Kutta for time evolution up to fourth order\nFramework based on AMReX\nAdaptive mesh refinement focuses resolution where needed\nSubcycling in time advances each resolution level at its resolved timestep\nPortable parallelization for multi-CPU or multi-GPU computing\nRequires only Python experience to create high-performance simulation code\nFor details, see the Code Generation page\nAvailable at the STvAR GitHub\n\n\n\n\n\nCompressible hydrodynamics\nRadiation hydrodynamics\nMagnetohydrodynamics\nAstrophysical Equations of State include electron degeneracy, relativity\nSecond or Fourth order in space and time\nAdaptive mesh refinement based on AMReX\nPerformance portable for personal or super computers\nFor research involving Castro, see the Neutron Stars page\nAvailable at the Castro GitHub\n\n\n\n\n\nLow-Mach number hydrodynamics\nModels convection in stellar atmospheres\nCaptures compressibility effects from atmospheric stratification\nLaminar flame simulations\nAdaptive mesh refinement based on AMReX\nFor surrogate ML models involving MAESTROeX, see the Machine Learning Surrogate Models page\nAvailable at the MAESTROeX GitHub\n\n\n\n\n\nNuclear reaction solvers\nAstrophysical equations of state\nModular structure\nImplements microscale (subgrid) physics required by Castro, MAESTROeX\nFor my reaction network and time integration research, see the Nuclear Reactions page\nAvailable at the Microphysics GitHub\n\n\n\n\n\nEasily construct reaction networks from available reaction datasets\nInterface with pynucastro using python scripts or Jupyter notebooks\nVisualize reaction networks and their rates over a range of thermodynamic conditions\nEasily see which rates are most important for an astrophysical environment\nFilter rates based on their relevance to your intended environment\nTurn a reaction network into a symbolic set of ordinary differential equations\nEvolve your reaction network in time\nGenerate Python or C++ code to calculate nucleosynthesis and nuclear energy generation\nGenerate code for the general Microphysics package to use in Castro or MAESTROeX\nOr, generate code for your own hydrodynamics or stellar evolution code\nFor my reaction network and time integration research, see the Nuclear Reactions page\nAvailable at the pynucastro GitHub"
  },
  {
    "objectID": "codes.html#open-source-scientific-codes",
    "href": "codes.html#open-source-scientific-codes",
    "title": "Computational Science Software",
    "section": "",
    "text": "Here are some of the open source scientific codes I have either created with my collaborators or contributed to as a developer in the course of my research.\n\n\n\nMesoscale weather modeling\nAdaptive mesh refinement\nComplex terrain modeling\nWater cycle modeling (precipitation, evaporation, condensation)\nFor details, see the Energy Research and Forecasting page\nAvailable at the ERF GitHub\n\n\n\n\n\n“Quantum” in evolving the neutrino flavor state\n“Kinetics” in transporting neutrino radiation\nLagrangian representation for neutrinos\nParticle-In-Cell method for mean-field neutrino interactions\nFully six-dimensional (three space, two angle, and time)\nSymbolic code generation supports two or three neutrino flavor states\nFor details, see the Neutrino Quantum Kinetics page\nAvailable at the Emu GitHub\n\n\n\n\n\nEulerian PDE solver method\nFinite differencing for spatial derivatives up to fourth order\nMethod of Lines with Runge-Kutta for time evolution up to fourth order\nFramework based on AMReX\nAdaptive mesh refinement focuses resolution where needed\nSubcycling in time advances each resolution level at its resolved timestep\nPortable parallelization for multi-CPU or multi-GPU computing\nRequires only Python experience to create high-performance simulation code\nFor details, see the Code Generation page\nAvailable at the STvAR GitHub\n\n\n\n\n\nCompressible hydrodynamics\nRadiation hydrodynamics\nMagnetohydrodynamics\nAstrophysical Equations of State include electron degeneracy, relativity\nSecond or Fourth order in space and time\nAdaptive mesh refinement based on AMReX\nPerformance portable for personal or super computers\nFor research involving Castro, see the Neutron Stars page\nAvailable at the Castro GitHub\n\n\n\n\n\nLow-Mach number hydrodynamics\nModels convection in stellar atmospheres\nCaptures compressibility effects from atmospheric stratification\nLaminar flame simulations\nAdaptive mesh refinement based on AMReX\nFor surrogate ML models involving MAESTROeX, see the Machine Learning Surrogate Models page\nAvailable at the MAESTROeX GitHub\n\n\n\n\n\nNuclear reaction solvers\nAstrophysical equations of state\nModular structure\nImplements microscale (subgrid) physics required by Castro, MAESTROeX\nFor my reaction network and time integration research, see the Nuclear Reactions page\nAvailable at the Microphysics GitHub\n\n\n\n\n\nEasily construct reaction networks from available reaction datasets\nInterface with pynucastro using python scripts or Jupyter notebooks\nVisualize reaction networks and their rates over a range of thermodynamic conditions\nEasily see which rates are most important for an astrophysical environment\nFilter rates based on their relevance to your intended environment\nTurn a reaction network into a symbolic set of ordinary differential equations\nEvolve your reaction network in time\nGenerate Python or C++ code to calculate nucleosynthesis and nuclear energy generation\nGenerate code for the general Microphysics package to use in Castro or MAESTROeX\nOr, generate code for your own hydrodynamics or stellar evolution code\nFor my reaction network and time integration research, see the Nuclear Reactions page\nAvailable at the pynucastro GitHub"
  },
  {
    "objectID": "nuclear_reactions.html",
    "href": "nuclear_reactions.html",
    "title": "Nuclear Reactions",
    "section": "",
    "text": "Get pynucastro\n\n\n\npynucastro is open-source and freely available at the pynucastro GitHub.\n\n\nNuclear physics powers a vast array of high energy astrophysics events, from fusion in stars to supernovae and neutron star dynamics. Nuclear reactions between atomic nuclei within stellar environments generate energy for starlight and power hydrodynamics and observable radiation.\nWe model nuclear energy generation with rate equations that couple nuclei via nuclear reactions at high temperatures. In turn, nuclear physicists assemble theoretial cross-sections and available experimental data from particle accelerators to calculate the nuclear reaction rates at various astrophysical temperatures.\nI worked with Mike Zingale to create pynucastro, an open-source Python package for interfacing with nuclear reaction databases. With pynucastro, researchers and students alike can easily:\n\nplot nuclear reaction rates\nassemble nuclear reaction networks specific to the astrophysics conditions they wish to model\nsolve the nuclear reaction equations\noutput clear C++ or python code to calcuate nuclear reaction models in other astrophysics simulation codes\n\n\n\n\nA pynucastro reaction network illustrating the nuclei and reaction rate links for nuclear Magnesium burning including the alpha chain and nearby odd-numbered nuclei.\n\n\nFor details, see E. Willcox & Zingale (2018) and Smith et al. (2023).\n\n\n\n\n\n\n\n\n\nGet our Microphysics Solvers\n\n\n\nOur Microphysics solvers are open-source and freely available at our Microphysics GitHub.\n\n\nNuclear reaction equations actually look mathematically similar to rate equations for chemistry. We can solve any equations of this sort using a variety of time integration techniques for coupled, first order ordinary differential equations. However, nuclear reactions pose a particular challenge in that they are very stiff, nonlinear equations due to their extreme temperature dependence.\nPhysically, this extreme nonlinearity arises because the probability of fusion tunneling through the nuclear Coulomb barrier increases sensitively with the center of mass energies of two nuclei. As astrophysical plasmas reach higher temperatures, nuclei within the plasma reach larger center of mass energies for pairwise interactions. High temperatures thus generate much more likely fusion events.\nNuclear reactions are thus especially sensitive to temperature, after all, that’s why stars can explode in thermonuclear runaway! This extreme temperature sensitivity makes numbers in our equations tend to “blow up” quickly too, so we have to take small, careful arithmetic steps to solve these equations correctly.\nIn mathematical terms, we have to use implicit time integration with careful error control. All such techniques achieve accuracy by implementing more careful calculations. Careful calculations and good error control require additional arithmetic steps, so we need more computing resources to make accurate predictions. While the accuracy versus efficiency tradeoff is especially prominent in nuclear astrophysics, virtually all other fields in computational science struggle with this exact tradeoff.\n(If you’ve ever wondered why meteorologists can get weather predictions wrong, well, it’s likely their predictive calculations traded too much accuracy for efficiency!)\nNote that if we carelessly write simulation code, even the fastest supercomputers will simply give us wrong answers fast!\nFor a discussion of the subtleties of solving nuclear reactions with some common methods, see Zingale et al. (2021).\nTo take advantage of modern heterogeneous supercomputers with lots of GPUs, I ported the VODE solver for implicit time integration from Fortran 77 to CUDA Fortran. But I realized there could be no room for mistakes, so I followed the old adage - “trust but verify.”\nIn my case, I spent every effort to accurately port a highly complex code. Anyone who has ever had to trace the combinatoric pathways of nested go to statements will sympathize!\nBut I didn’t fully trust that I had made no mistakes or that the GPUs would yield correct answers. So I carefully verified the code, requiring that it give me exactly the same results as before the port when comparing CPU calculations. When running my new code on the GPUs, I allowed its results to differ from the CPU results only at the level of numerical roundoff error.\nOur collaboration described this port and the science our combined reaction and hydrodynamics code enabled us to investigate in our paper for Supercomputing 20 Katz et al. (2020).\n\n\n\nDensity contours and the thermonuclear ignition point for colliding white dwarf stars simulated with the CASTRO code.\n\n\nLater, we ported my CUDA Fortan integrator to inlined CUDA C++.\nWe now use generic macros from the AMReX framework allowing us to compile the same C++ integrator for CPUs, NVIDIA GPUs, or AMD GPUs.\nWe published our work and our open-source scientific computing codes in a series of papers.\nFor details, see Zingale et al. (2018), Fan et al. (2019), Almgren et al. (2020), Zingale et al. (2020), and Harpole et al. (2020).\nWhile we directly communicated our methods and open code to the wider astrophysics community, our GPU strategy is broadly applicable to related challenges all across computational science.",
    "crumbs": [
      "Nuclear Reactions"
    ]
  },
  {
    "objectID": "nuclear_reactions.html#mathematically-modeling-nuclear-reactions",
    "href": "nuclear_reactions.html#mathematically-modeling-nuclear-reactions",
    "title": "Nuclear Reactions",
    "section": "",
    "text": "Get pynucastro\n\n\n\npynucastro is open-source and freely available at the pynucastro GitHub.\n\n\nNuclear physics powers a vast array of high energy astrophysics events, from fusion in stars to supernovae and neutron star dynamics. Nuclear reactions between atomic nuclei within stellar environments generate energy for starlight and power hydrodynamics and observable radiation.\nWe model nuclear energy generation with rate equations that couple nuclei via nuclear reactions at high temperatures. In turn, nuclear physicists assemble theoretial cross-sections and available experimental data from particle accelerators to calculate the nuclear reaction rates at various astrophysical temperatures.\nI worked with Mike Zingale to create pynucastro, an open-source Python package for interfacing with nuclear reaction databases. With pynucastro, researchers and students alike can easily:\n\nplot nuclear reaction rates\nassemble nuclear reaction networks specific to the astrophysics conditions they wish to model\nsolve the nuclear reaction equations\noutput clear C++ or python code to calcuate nuclear reaction models in other astrophysics simulation codes\n\n\n\n\nA pynucastro reaction network illustrating the nuclei and reaction rate links for nuclear Magnesium burning including the alpha chain and nearby odd-numbered nuclei.\n\n\nFor details, see E. Willcox & Zingale (2018) and Smith et al. (2023).",
    "crumbs": [
      "Nuclear Reactions"
    ]
  },
  {
    "objectID": "nuclear_reactions.html#computationally-solving-nuclear-reactions",
    "href": "nuclear_reactions.html#computationally-solving-nuclear-reactions",
    "title": "Nuclear Reactions",
    "section": "",
    "text": "Get our Microphysics Solvers\n\n\n\nOur Microphysics solvers are open-source and freely available at our Microphysics GitHub.\n\n\nNuclear reaction equations actually look mathematically similar to rate equations for chemistry. We can solve any equations of this sort using a variety of time integration techniques for coupled, first order ordinary differential equations. However, nuclear reactions pose a particular challenge in that they are very stiff, nonlinear equations due to their extreme temperature dependence.\nPhysically, this extreme nonlinearity arises because the probability of fusion tunneling through the nuclear Coulomb barrier increases sensitively with the center of mass energies of two nuclei. As astrophysical plasmas reach higher temperatures, nuclei within the plasma reach larger center of mass energies for pairwise interactions. High temperatures thus generate much more likely fusion events.\nNuclear reactions are thus especially sensitive to temperature, after all, that’s why stars can explode in thermonuclear runaway! This extreme temperature sensitivity makes numbers in our equations tend to “blow up” quickly too, so we have to take small, careful arithmetic steps to solve these equations correctly.\nIn mathematical terms, we have to use implicit time integration with careful error control. All such techniques achieve accuracy by implementing more careful calculations. Careful calculations and good error control require additional arithmetic steps, so we need more computing resources to make accurate predictions. While the accuracy versus efficiency tradeoff is especially prominent in nuclear astrophysics, virtually all other fields in computational science struggle with this exact tradeoff.\n(If you’ve ever wondered why meteorologists can get weather predictions wrong, well, it’s likely their predictive calculations traded too much accuracy for efficiency!)\nNote that if we carelessly write simulation code, even the fastest supercomputers will simply give us wrong answers fast!\nFor a discussion of the subtleties of solving nuclear reactions with some common methods, see Zingale et al. (2021).\nTo take advantage of modern heterogeneous supercomputers with lots of GPUs, I ported the VODE solver for implicit time integration from Fortran 77 to CUDA Fortran. But I realized there could be no room for mistakes, so I followed the old adage - “trust but verify.”\nIn my case, I spent every effort to accurately port a highly complex code. Anyone who has ever had to trace the combinatoric pathways of nested go to statements will sympathize!\nBut I didn’t fully trust that I had made no mistakes or that the GPUs would yield correct answers. So I carefully verified the code, requiring that it give me exactly the same results as before the port when comparing CPU calculations. When running my new code on the GPUs, I allowed its results to differ from the CPU results only at the level of numerical roundoff error.\nOur collaboration described this port and the science our combined reaction and hydrodynamics code enabled us to investigate in our paper for Supercomputing 20 Katz et al. (2020).\n\n\n\nDensity contours and the thermonuclear ignition point for colliding white dwarf stars simulated with the CASTRO code.\n\n\nLater, we ported my CUDA Fortan integrator to inlined CUDA C++.\nWe now use generic macros from the AMReX framework allowing us to compile the same C++ integrator for CPUs, NVIDIA GPUs, or AMD GPUs.\nWe published our work and our open-source scientific computing codes in a series of papers.\nFor details, see Zingale et al. (2018), Fan et al. (2019), Almgren et al. (2020), Zingale et al. (2020), and Harpole et al. (2020).\nWhile we directly communicated our methods and open code to the wider astrophysics community, our GPU strategy is broadly applicable to related challenges all across computational science.",
    "crumbs": [
      "Nuclear Reactions"
    ]
  },
  {
    "objectID": "mesoscale.html",
    "href": "mesoscale.html",
    "title": "Energy Research and Forecasting",
    "section": "",
    "text": "Energy Research and Forecasting\n\n\n\n\n\n\nGet the ERF code for mesoscale weather simulations\n\n\n\nERF is open source and freely available at the ERF GitHub.\n\n\nAt LBNL, I worked as a project scientist to help write the Energy Research and Forecasting (ERF) code for mesoscale weather modeling.\nMesoscale modeling is exactly the calculations you need to do to figure out where along a coastline is the most efficient place to generate power with a wind turbine farm.\nTo optimize your wind turbine output, you’ll need to calculate the expected wind speeds year round as the wind currents around the Earth shift throughout the year. You’ll also need to account for any nearby mountains and the unique interactions between the ocean and Earth’s atmosphere.\nWe wrote the ERF code to help researchers answer these exact questions and enable engineers to design efficient wind power generation solutions.\nWe built ERF on top of the adaptive mesh refinement (AMR) library AMReX, which our CCSE group at LBNL develops.\nAMReX allows computational scientists to focus our computing resources on the parts of our simulations that require greatest accuracy.\nOur success developing ERF enabled our team to simulate a three-dimensional supercell storm, capturing the storm winds along with the water cycle of rainfall, evaporation, and cloud condensation that keeps the storm active.\n\n\n\nERF Supercell Simulation\n\n\nWe published our ERF results along with a suite of verification and validation tests in Lattanzi et al. (2024).\nWe also published the ERF code itself in the Journal of Open Source Software (JOSS) in Almgren et al. (2023).\n\n\n\n\n\n Back to topReferences\n\nAlmgren, A., Lattanzi, A., Haque, R., Jha, P., Kosovic, B., Mirocha, J., Perry, B., Quon, E., Sanders, M., Wiersema, D., Willcox, D., Yuan, X., & Zhang, W. 2023, JOSS, 8, 5202, https://joss.theoj.org/papers/10.21105/joss.05202\n\n\nLattanzi, A., Almgren, A., Quon, E., Natarajan, M., Kosovic, B., Mirocha, J., Perry, B., Wiersema, D., Willcox, D., Yuan, X., & Zhang, W. 2024 (arXiv), https://arxiv.org/abs/2412.04395",
    "crumbs": [
      "Energy Research and Forecasting"
    ]
  },
  {
    "objectID": "neutron_stars.html",
    "href": "neutron_stars.html",
    "title": "Neutron Stars",
    "section": "",
    "text": "Get the Castro code for Compressible ASTROphysics\n\n\n\nOur Castro code and our simulation inputs files are open-source and freely available at the Castro GitHub.\n\n\nSolving nuclear reactions on GPUs enabled accelerated nuclear astrophysics simulations using the Castro compressible hydrodynamics code. For more details about how we accelerated nuclear reactions, see Nuclear Reactions.\nMy GPU work enabled our nuclear astrophysics collaboration to simulate detailed two and three-dimensional nuclear flames on neutron star surfaces!\nNeutron stars in binary star systems can under certain astrophysical conditions accrete material from their companion star. In these cases, the neutron star’s atmosphere can undergo periodic thermonuclear runaway burning visible from Earth as a bright burst of X-rays.\nBy carefully modeling the X-ray burst physics, we hope to correlate observed X-ray bursts with properties of the unseen, super-dense neutron star core hiding below its atmosphere.\nFor details, see Zingale et al. (2019), Eiden et al. (2020), and Harpole et al. (2021).\n\n\n\n\n\n\n\n\n\nGet the WarpX code for Electromagnetic PIC\n\n\n\nThe WarpX code we used is open-source and freely available at the WarpX GitHub.\n\n\nAt LBL, I also collaborated with scientists who worked on electromagnetic modeling for particle accelerator physics. Together, we started a project to model relativistic particle acceleration from magnetic reconnection in rapidly rotating neutron star magnetospheres.\nWe worked with a talented intern, Eloise Yang, who set up these simulations in the WarpX electromagnetic particle-in-cell (PIC) code. After Eloise left LBL, postdoc Hannah Klion picked up the project. Our combined efforts succeeded, and our project’s first paper explored new advances in electromagnetic PIC solver methods and their utility for simulating charge acceleration from relativistic magnetic reconnection.\nFor details, see Klion et al. (2023).\nThis research sets the foundation for applying our numerical methods to simulate high-energy particle emission from not only magnetic reconnection but also cosmic ray acceleration in other astrophysical environments.",
    "crumbs": [
      "Neutron Stars"
    ]
  },
  {
    "objectID": "neutron_stars.html#x-ray-bursting-neutron-stars",
    "href": "neutron_stars.html#x-ray-bursting-neutron-stars",
    "title": "Neutron Stars",
    "section": "",
    "text": "Get the Castro code for Compressible ASTROphysics\n\n\n\nOur Castro code and our simulation inputs files are open-source and freely available at the Castro GitHub.\n\n\nSolving nuclear reactions on GPUs enabled accelerated nuclear astrophysics simulations using the Castro compressible hydrodynamics code. For more details about how we accelerated nuclear reactions, see Nuclear Reactions.\nMy GPU work enabled our nuclear astrophysics collaboration to simulate detailed two and three-dimensional nuclear flames on neutron star surfaces!\nNeutron stars in binary star systems can under certain astrophysical conditions accrete material from their companion star. In these cases, the neutron star’s atmosphere can undergo periodic thermonuclear runaway burning visible from Earth as a bright burst of X-rays.\nBy carefully modeling the X-ray burst physics, we hope to correlate observed X-ray bursts with properties of the unseen, super-dense neutron star core hiding below its atmosphere.\nFor details, see Zingale et al. (2019), Eiden et al. (2020), and Harpole et al. (2021).",
    "crumbs": [
      "Neutron Stars"
    ]
  },
  {
    "objectID": "neutron_stars.html#particle-acceleration-in-neutron-star-environments",
    "href": "neutron_stars.html#particle-acceleration-in-neutron-star-environments",
    "title": "Neutron Stars",
    "section": "",
    "text": "Get the WarpX code for Electromagnetic PIC\n\n\n\nThe WarpX code we used is open-source and freely available at the WarpX GitHub.\n\n\nAt LBL, I also collaborated with scientists who worked on electromagnetic modeling for particle accelerator physics. Together, we started a project to model relativistic particle acceleration from magnetic reconnection in rapidly rotating neutron star magnetospheres.\nWe worked with a talented intern, Eloise Yang, who set up these simulations in the WarpX electromagnetic particle-in-cell (PIC) code. After Eloise left LBL, postdoc Hannah Klion picked up the project. Our combined efforts succeeded, and our project’s first paper explored new advances in electromagnetic PIC solver methods and their utility for simulating charge acceleration from relativistic magnetic reconnection.\nFor details, see Klion et al. (2023).\nThis research sets the foundation for applying our numerical methods to simulate high-energy particle emission from not only magnetic reconnection but also cosmic ray acceleration in other astrophysical environments.",
    "crumbs": [
      "Neutron Stars"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome!\nWelcome, I’m Don Willcox, a physicist and computational scientist.\nHere, you’ll find an array of science I research using math and computer code.\nFor a tour of my research highlights, see my Research page.\nFor an overview of scientific codes I develop, see my Codes page.\nYou can also watch some of my recorded talks or see a full list on my Talks page.\nOr if you are interested in my publications, please see my Publications gallery.\nFor all my other career details, you can download or view my CV on my CV page.\nFinally, maybe you would like to learn more about me personally or contact me? In that case, please see my Bio page.\nWarm Regards,\nDon\n\n\n\n\n Back to top"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "As my publication record illustrates, I research best by collaborating with other scientists.\n\n\nPublications (PDF)\nGoogle Scholar Page\nPublications on NASA ADS\nPreprints on the arXiv\n\n\n\n\n\n\nSimulated three-dimensional rainstorm supercell showing cloud water (white), rain water (red), and accumulated rainfall (bottom). DOI: https://www.doi.org/10.48550/arXiv.2412.04395\n\n\nA. Lattanzi, A. Almgren, E. Quon, M. Natarajan, B. Kosovic, J. Mirocha, B. Perry, D. Wiersema, D. Willcox, X. Yuan, W. Zhang\n2024, arXiv:2412.04395\nhttps://www.doi.org/10.48550/arXiv.2412.04395\n\n\n\n\n\n\nSimulated binary black hole inspiral traces black hole centers through (3+1) spacetime and radiates the characteristic chirp waveform. DOI: https://www.doi.org/10.1088/1361-6382/ad0b37\n\n\nA. J. Peterson, D. Willcox, and P. Moesta\n2023, Classical and Quantum Gravity, 40, 245013\nhttps://www.doi.org/10.1088/1361-6382/ad0b37\n\n\n\n\n\n\nDensity profiles of thermonuclear supernova simulations from initial Carbon-Oxygen-Neon white dwarfs generating least (left) and most (right) Nickel-56. DOI: https://www.doi.org/10.3847/1538-4357/acf658\n\n\nC. Feldman, N. Gutierrez, E. Eisenberg, D. E. Willcox, D. M. Townsley, A. C. Calder\n2023, Astrophysical Journal, 959, 112\nhttps://www.doi.org/10.3847/1538-4357/acf658\n\n\n\n\n\n\nLogo of the Journal of Open Source Software, used under the CC BY 4.0 License. DOI: https://www.doi.org/10.21105/joss.05202\n\n\nA. Almgren, A. Lattanzi, R. Haque, P. Jha, B. Kosovic, J. Mirocha, B. Perry, E. Quon, M. Sanders, D. Wiersema, D. Willcox, X. Yuan, W. Zhang\n2023, Journal of Open Source Software, 8, 87\nhttps://www.doi.org/10.21105/joss.05202\n\n\n\n\n\n\nSecondary plasmoid reconnection event shown before (top) and after (bottom) initially evolving from a relativistic transverse current sheet. DOI: https://www.doi.org/10.3847/1538-4357/acd75b\n\n\nH. Klion, R. Jambunathan, M. E. Rowan, E. Yang, D. Willcox, J. L. Vay, R. Lehe, A. Myers, A. Huebl, W. Zhang\n2023, Astrophysical Journal, 952, 8\nhttps://www.doi.org/10.3847/1538-4357/acd75b\n\n\n\n\n\n\nA pynucastro reaction network illustrating the nuclei and reaction rate links for nuclear Magnesium burning including the alpha chain and nearby odd-numbered nuclei. DOI: https://www.doi.org/10.3847/1538-4357/acbaff\n\n\nA. Smith Clark, E. T. Johnson, Z. Chen, K. Eiden, D. E. Willcox, B. Boyd, L. Cao, C. J. DeGrendele, M. Zingale\n2023, Astrophysical Journal, 947, 65\nhttps://www.doi.org/10.3847/1538-4357/acbaff\n\n\n\n\n\n\nCarbon fusion flame profiles illustrating our machine learning model (dots) compares very favorably to implicit time integration for reactions (lines) on the laminar test case under study. DOI: https://www.doi.org/10.3847/1538-4357/ac9a4b\n\n\nD. Fan, D. E. Willcox, C. DeGrendele, M. Zingale, A. Nonaka\n2022, Astrophysical Journal, 940, 134\nhttps://www.doi.org/10.3847/1538-4357/ac9a4b\n\n\n\n\n\n\nThree-dimensional simulation evolving the axion field over cosmological time, illustrating the axion energy density and axion string structures at late times. DOI: https://www.doi.org/10.1038/s41467-022-28669-y\n\n\nM. Buschmann, J. W. Foster, A. Hook, A. Peterson, D. E. Willcox, W. Zhang, B. R. Safdi\n2022, Nature Communications, 13, 1\nhttps://www.doi.org/10.1038/s41467-022-28669-y\n\n\n\n\n\n\nThree-dimensional, all-angle Particle-in-Cell simulation of a three-flavor neutrino fast flavor instability. Volume rendering shown illustrates the fastest-growing electron-muon neutrino flavor instability, seen in shaded contours which evenly subdivide the angular electron-muon phase at 0 (blue), two-thirds pi (white), and four-thirds pi (red). DOI: https://www.doi.org/10.1103/PhysRevD.104.103023\n\n\nS. Richers, D. E. Willcox, N. M. Ford\n2021, Physical Review D, 104, 103023\nhttps://www.doi.org/10.1103/PhysRevD.104.103023\n\n\n\n\n\n\nSpace and time convergence of fluid density for three variations of the Strang method for reacting hydrodynamics. DOI: https://www.doi.org/10.3847/2515-5172/abf3cb\n\n\nM. Zingale, M. P. Katz, D. E. Willcox, A. Harpole\n2021, Research Notes of the AAS, 5, 71\nhttps://www.doi.org/10.3847/2515-5172/abf3cb\n\n\n\n\n\n\nNuclear energy generation rate within a Helium fusion flame on a rotating neutron star surface. DOI: https://www.doi.org/10.3847/1538-4357/abee87\n\n\nA. Harpole, N. M. Ford, K. Eiden, M. Zingale, D. E. Willcox, Y. Cavecchi, M. P. Katz\n2021, Astrophysical Journal, 912, 36\nhttps://www.doi.org/10.3847/1538-4357/abee87\n\n\n\n\n\n\nTime evolution of the average neutrino density over one-half nanosecond showing the fastest axially symmetric instability. DOI: https://www.doi.org/10.1103/PhysRevD.103.083013\n\n\nS. Richers, D. E. Willcox, N. M. Ford, A. Myers\n2021, Physical Review D, 103, 083013\nhttps://www.doi.org/10.1103/PhysRevD.103.083013\n\n\n\n\n\n\nDensity contours and the thermonuclear ignition point for colliding white dwarf stars simulated with the CASTRO code. DOI: https://www.doi.org/10.1109/SC41405.2020.00095\n\n\nM. Katz, A. Almgren, M. Barrios Sazo, K. Eiden, K. Gott, A. Harpole, J. Sexton, D. Willcox, W. Zhang, M. Zingale\n2020, Supercomputing 20 (SC20)\nhttps://www.doi.org/10.1109/SC41405.2020.00095\n\n\n\n\n\n\nLogo of the Journal of Open Source Software, used under the CC BY 4.0 License. DOI: https://www.doi.org/10.21105/joss.02513\n\n\nA. Almgren, M. Barrios Sazo, J. Bell, A. Harpole, M. Katz, J. Sexton, D. Willcox, W. Zhang, M. Zingale\n2020, Journal of Open Source Software, 5, 54, 2513\nhttps://www.doi.org/10.21105/joss.02513\n\n\n\n\n\n\nMean molecular weight within a Helium fusion flame on a neutron star surface. DOI: https://www.doi.org/10.3847/1538-4357/ab80bc\n\n\nK. Eiden, M. Zingale, A. Harpole, D. Willcox, Y. Cavecchi, M. P. Katz\n2020, Astrophysical Journal, 894, 6\nhttps://www.doi.org/10.3847/1538-4357/ab80bc\n\n\n\n\n\n\nWeak scaling on GPU and CPU for the CASTRO code running a white dwarf merger simulation on the Summit supercomputer. DOI: https://www.doi.org/10.1088/1742-6596/1623/1/012021\n\n\nM. Zingale, A. S. Almgren, M. Barrios Sazo, J. B. Bell, K. Eiden, A. Harpole, M. P. Katz, A. J. Nonaka, D. E. Willcox, W. Zhang\n2020, Journal of Physics: Conference Series, 1623, 012021\nhttps://www.doi.org/10.1088/1742-6596/1623/1/012021\n\n\n\n\n\n\nGPU speedup for MAESTROeX core subroutines on the Summit supercomputer. DOI: https://www.doi.org/10.1088/1742-6596/1623/1/012015\n\n\nA. Harpole, D. Fan, M. P. Katz, A. J. Nonaka, D. E. Willcox, M. Zingale\n2020, Journal of Physics: Conference Series, 1623, 012015\nhttps://www.doi.org/10.1088/1742-6596/1623/1/012015\n\n\n\n\n\n\nLogo of the Journal of Open Source Software, used under the CC BY 4.0 License. DOI: https://www.doi.org/10.21105/joss.01757\n\n\nD. Fan, A. Nonaka, A. Almgren, D. Willcox, A. Harpole, M. Zingale\n2019, Journal of Open Source Software, 4, 43, 1757\nhttps://www.doi.org/10.21105/joss.01757\n\n\n\n\n\n\nEstimated Nickel-56 mass produced by mixed, hybrid Carbon-Oxygen-Neon white dwarf models. DOI: https://www.doi.org/10.3847/1538-4357/ab511a\n\n\nC. N. Augustine, D. E. Willcox, J. Brooks, D. M. Townsley, A. C. Calder\n2019, Astrophysical Journal, 887, 188\nhttps://www.doi.org/10.3847/1538-4357/ab511a\n\n\n\n\n\n\nNuclear energy generation rate inside a helium flame on a neutron star surface. DOI: https://www.doi.org/10.1088/1742-6596/1225/1/012005\n\n\nM. Zingale, K. Eiden, Y. Cavecchi, A. Harpole, J. B. Bell, M. Chang, I. Hawke, M. P. Katz, C. M. Malone, A. J. Nonaka, D. E. Willcox, W. Zhang\n2019, Journal of Physics: Conference Series, 1225, 012005\nhttps://www.doi.org/10.1088/1742-6596/1225/1/012005\n\n\n\n\n\n\nSpecific energy generation rate in a simulated white dwarf cross section resulting from carbon fusion and A=23 Urca reactions. DOI: https://www.doi.org/10.1088/1742-6596/1225/1/012002\n\n\nA. C. Calder, D. E. Willcox, C. J. DeGrendele, D. Shangase, M. Zingale, D. M. Townsley\n2019, Journal of Physics: Conference Series, 1225, 012002\nhttps://www.doi.org/10.1088/1742-6596/1225/1/012002\n\n\n\n\n\n\nSurface plot showing model white dwarf’s mass dependence on wind parameters driving mass loss. DOI: https://www.doi.org/10.1088/1742-6596/1031/1/012016\n\n\nA. C. Calder, M. M. Hoffman, D. E. Willcox, M. P. Katz, F. D. Swesty, S. Ferson\n2018, Journal of Physics: Conference Series, 1031, 012016\nhttps://www.doi.org/10.1088/1742-6596/1031/1/012016\n\n\n\n\n\n\nLogo of the Journal of Open Source Software, used under the CC BY 4.0 License. DOI: https://www.doi.org/10.21105/joss.00588\n\n\nD. E. Willcox, M. Zingale\n2018, Journal of Open Source Software, 3(23), 588\nhttps://www.doi.org/10.21105/joss.00588\n\n\n\n\n\n\nDensity contours from a simulation of merging white dwarfs. DOI: https://www.doi.org/10.1088/1742-6596/1031/1/012024\n\n\nM. Zingale, A. S. Almgren, M. G. Barrios Sazo, V. E. Beckner, J. B. Bell, B. Friesen, A. M. Jacobs, M. P. Katz, C. M. Malone, A. J. Nonaka, D. E. Willcox, W. Zhang\n2018, Journal of Physics: Conference Series, 1031, 012024\nhttps://www.doi.org/10.1088/1742-6596/1031/1/012024\n\n\n\n\n\n\nDeflagration-to-detonation transition for a simulated C-O white dwarf. DOI: https://www.doi.org/10.1088/1742-6596/837/1/012005\n\n\nA. C. Calder, B. K. Krueger, A. P. Jackson, D. E. Willcox, B. J. Miles, D. M. Townsley\n2017, Journal of Physics: Conference Series, 837, 012005\nhttps://www.doi.org/10.1088/1742-6596/837/1/012005\n\n\n\n\n\n\nProgress of the burning front into the stellar core for one simulated hybrid C-O-Ne white dwarf. DOI: https://www.doi.org/10.3847/0004-637X/832/1/13\n\n\nD. E. Willcox, D. M. Townsley, A. C. Calder, P. Denissenkov, F. Herwig\n2016, Astrophysical Journal, 832, 13\nhttps://www.doi.org/10.3847/0004-637X/832/1/13"
  },
  {
    "objectID": "publications.html#publication-listings",
    "href": "publications.html#publication-listings",
    "title": "Publications",
    "section": "",
    "text": "Publications (PDF)\nGoogle Scholar Page\nPublications on NASA ADS\nPreprints on the arXiv"
  },
  {
    "objectID": "publications.html#erf-energy-research-and-forecasting-model",
    "href": "publications.html#erf-energy-research-and-forecasting-model",
    "title": "Publications",
    "section": "",
    "text": "Simulated three-dimensional rainstorm supercell showing cloud water (white), rain water (red), and accumulated rainfall (bottom). DOI: https://www.doi.org/10.48550/arXiv.2412.04395\n\n\nA. Lattanzi, A. Almgren, E. Quon, M. Natarajan, B. Kosovic, J. Mirocha, B. Perry, D. Wiersema, D. Willcox, X. Yuan, W. Zhang\n2024, arXiv:2412.04395\nhttps://www.doi.org/10.48550/arXiv.2412.04395"
  },
  {
    "objectID": "publications.html#code-generation-for-amrex-with-applications-to-numerical-relativity",
    "href": "publications.html#code-generation-for-amrex-with-applications-to-numerical-relativity",
    "title": "Publications",
    "section": "",
    "text": "Simulated binary black hole inspiral traces black hole centers through (3+1) spacetime and radiates the characteristic chirp waveform. DOI: https://www.doi.org/10.1088/1361-6382/ad0b37\n\n\nA. J. Peterson, D. Willcox, and P. Moesta\n2023, Classical and Quantum Gravity, 40, 245013\nhttps://www.doi.org/10.1088/1361-6382/ad0b37"
  },
  {
    "objectID": "publications.html#dimming-the-lights-2d-simulations-of-deflagrations-of-hybrid-cone-white-dwarfs-using-flash",
    "href": "publications.html#dimming-the-lights-2d-simulations-of-deflagrations-of-hybrid-cone-white-dwarfs-using-flash",
    "title": "Publications",
    "section": "",
    "text": "Density profiles of thermonuclear supernova simulations from initial Carbon-Oxygen-Neon white dwarfs generating least (left) and most (right) Nickel-56. DOI: https://www.doi.org/10.3847/1538-4357/acf658\n\n\nC. Feldman, N. Gutierrez, E. Eisenberg, D. E. Willcox, D. M. Townsley, A. C. Calder\n2023, Astrophysical Journal, 959, 112\nhttps://www.doi.org/10.3847/1538-4357/acf658"
  },
  {
    "objectID": "publications.html#erf-energy-research-and-forecasting",
    "href": "publications.html#erf-energy-research-and-forecasting",
    "title": "Publications",
    "section": "",
    "text": "Logo of the Journal of Open Source Software, used under the CC BY 4.0 License. DOI: https://www.doi.org/10.21105/joss.05202\n\n\nA. Almgren, A. Lattanzi, R. Haque, P. Jha, B. Kosovic, J. Mirocha, B. Perry, E. Quon, M. Sanders, D. Wiersema, D. Willcox, X. Yuan, W. Zhang\n2023, Journal of Open Source Software, 8, 87\nhttps://www.doi.org/10.21105/joss.05202"
  },
  {
    "objectID": "publications.html#particle-in-cell-simulations-of-relativistic-magnetic-reconnection-with-advanced-maxwell-solver-algorithms",
    "href": "publications.html#particle-in-cell-simulations-of-relativistic-magnetic-reconnection-with-advanced-maxwell-solver-algorithms",
    "title": "Publications",
    "section": "",
    "text": "Secondary plasmoid reconnection event shown before (top) and after (bottom) initially evolving from a relativistic transverse current sheet. DOI: https://www.doi.org/10.3847/1538-4357/acd75b\n\n\nH. Klion, R. Jambunathan, M. E. Rowan, E. Yang, D. Willcox, J. L. Vay, R. Lehe, A. Myers, A. Huebl, W. Zhang\n2023, Astrophysical Journal, 952, 8\nhttps://www.doi.org/10.3847/1538-4357/acd75b"
  },
  {
    "objectID": "publications.html#pynucastro-a-python-library-for-nuclear-astrophysics",
    "href": "publications.html#pynucastro-a-python-library-for-nuclear-astrophysics",
    "title": "Publications",
    "section": "",
    "text": "A pynucastro reaction network illustrating the nuclei and reaction rate links for nuclear Magnesium burning including the alpha chain and nearby odd-numbered nuclei. DOI: https://www.doi.org/10.3847/1538-4357/acbaff\n\n\nA. Smith Clark, E. T. Johnson, Z. Chen, K. Eiden, D. E. Willcox, B. Boyd, L. Cao, C. J. DeGrendele, M. Zingale\n2023, Astrophysical Journal, 947, 65\nhttps://www.doi.org/10.3847/1538-4357/acbaff"
  },
  {
    "objectID": "publications.html#neural-networks-for-nuclear-reactions-in-maestroex",
    "href": "publications.html#neural-networks-for-nuclear-reactions-in-maestroex",
    "title": "Publications",
    "section": "",
    "text": "Carbon fusion flame profiles illustrating our machine learning model (dots) compares very favorably to implicit time integration for reactions (lines) on the laminar test case under study. DOI: https://www.doi.org/10.3847/1538-4357/ac9a4b\n\n\nD. Fan, D. E. Willcox, C. DeGrendele, M. Zingale, A. Nonaka\n2022, Astrophysical Journal, 940, 134\nhttps://www.doi.org/10.3847/1538-4357/ac9a4b"
  },
  {
    "objectID": "publications.html#dark-matter-from-axion-strings-with-adaptive-mesh-refinement",
    "href": "publications.html#dark-matter-from-axion-strings-with-adaptive-mesh-refinement",
    "title": "Publications",
    "section": "",
    "text": "Three-dimensional simulation evolving the axion field over cosmological time, illustrating the axion energy density and axion string structures at late times. DOI: https://www.doi.org/10.1038/s41467-022-28669-y\n\n\nM. Buschmann, J. W. Foster, A. Hook, A. Peterson, D. E. Willcox, W. Zhang, B. R. Safdi\n2022, Nature Communications, 13, 1\nhttps://www.doi.org/10.1038/s41467-022-28669-y"
  },
  {
    "objectID": "publications.html#neutrino-fast-flavor-instability-in-three-dimensions",
    "href": "publications.html#neutrino-fast-flavor-instability-in-three-dimensions",
    "title": "Publications",
    "section": "",
    "text": "Three-dimensional, all-angle Particle-in-Cell simulation of a three-flavor neutrino fast flavor instability. Volume rendering shown illustrates the fastest-growing electron-muon neutrino flavor instability, seen in shaded contours which evenly subdivide the angular electron-muon phase at 0 (blue), two-thirds pi (white), and four-thirds pi (red). DOI: https://www.doi.org/10.1103/PhysRevD.104.103023\n\n\nS. Richers, D. E. Willcox, N. M. Ford\n2021, Physical Review D, 104, 103023\nhttps://www.doi.org/10.1103/PhysRevD.104.103023"
  },
  {
    "objectID": "publications.html#practical-effects-of-integrating-temperature-with-strang-split-reactions",
    "href": "publications.html#practical-effects-of-integrating-temperature-with-strang-split-reactions",
    "title": "Publications",
    "section": "",
    "text": "Space and time convergence of fluid density for three variations of the Strang method for reacting hydrodynamics. DOI: https://www.doi.org/10.3847/2515-5172/abf3cb\n\n\nM. Zingale, M. P. Katz, D. E. Willcox, A. Harpole\n2021, Research Notes of the AAS, 5, 71\nhttps://www.doi.org/10.3847/2515-5172/abf3cb"
  },
  {
    "objectID": "publications.html#dynamics-of-laterally-propagating-flames-in-x-ray-bursts.-ii.-realistic-burning-and-rotation",
    "href": "publications.html#dynamics-of-laterally-propagating-flames-in-x-ray-bursts.-ii.-realistic-burning-and-rotation",
    "title": "Publications",
    "section": "",
    "text": "Nuclear energy generation rate within a Helium fusion flame on a rotating neutron star surface. DOI: https://www.doi.org/10.3847/1538-4357/abee87\n\n\nA. Harpole, N. M. Ford, K. Eiden, M. Zingale, D. E. Willcox, Y. Cavecchi, M. P. Katz\n2021, Astrophysical Journal, 912, 36\nhttps://www.doi.org/10.3847/1538-4357/abee87"
  },
  {
    "objectID": "publications.html#particle-in-cell-simulation-of-the-neutrino-fast-flavor-instability",
    "href": "publications.html#particle-in-cell-simulation-of-the-neutrino-fast-flavor-instability",
    "title": "Publications",
    "section": "",
    "text": "Time evolution of the average neutrino density over one-half nanosecond showing the fastest axially symmetric instability. DOI: https://www.doi.org/10.1103/PhysRevD.103.083013\n\n\nS. Richers, D. E. Willcox, N. M. Ford, A. Myers\n2021, Physical Review D, 103, 083013\nhttps://www.doi.org/10.1103/PhysRevD.103.083013"
  },
  {
    "objectID": "publications.html#preparing-nuclear-astrophysics-for-exascale",
    "href": "publications.html#preparing-nuclear-astrophysics-for-exascale",
    "title": "Publications",
    "section": "",
    "text": "Density contours and the thermonuclear ignition point for colliding white dwarf stars simulated with the CASTRO code. DOI: https://www.doi.org/10.1109/SC41405.2020.00095\n\n\nM. Katz, A. Almgren, M. Barrios Sazo, K. Eiden, K. Gott, A. Harpole, J. Sexton, D. Willcox, W. Zhang, M. Zingale\n2020, Supercomputing 20 (SC20)\nhttps://www.doi.org/10.1109/SC41405.2020.00095"
  },
  {
    "objectID": "publications.html#castro-a-massively-parallel-compressible-astrophysics-simulation-code",
    "href": "publications.html#castro-a-massively-parallel-compressible-astrophysics-simulation-code",
    "title": "Publications",
    "section": "",
    "text": "Logo of the Journal of Open Source Software, used under the CC BY 4.0 License. DOI: https://www.doi.org/10.21105/joss.02513\n\n\nA. Almgren, M. Barrios Sazo, J. Bell, A. Harpole, M. Katz, J. Sexton, D. Willcox, W. Zhang, M. Zingale\n2020, Journal of Open Source Software, 5, 54, 2513\nhttps://www.doi.org/10.21105/joss.02513"
  },
  {
    "objectID": "publications.html#dynamics-of-laterally-propagating-flames-in-x-ray-bursts.-i.-burning-front-structure",
    "href": "publications.html#dynamics-of-laterally-propagating-flames-in-x-ray-bursts.-i.-burning-front-structure",
    "title": "Publications",
    "section": "",
    "text": "Mean molecular weight within a Helium fusion flame on a neutron star surface. DOI: https://www.doi.org/10.3847/1538-4357/ab80bc\n\n\nK. Eiden, M. Zingale, A. Harpole, D. Willcox, Y. Cavecchi, M. P. Katz\n2020, Astrophysical Journal, 894, 6\nhttps://www.doi.org/10.3847/1538-4357/ab80bc"
  },
  {
    "objectID": "publications.html#the-castro-amr-simulation-code-current-and-future-developments",
    "href": "publications.html#the-castro-amr-simulation-code-current-and-future-developments",
    "title": "Publications",
    "section": "",
    "text": "Weak scaling on GPU and CPU for the CASTRO code running a white dwarf merger simulation on the Summit supercomputer. DOI: https://www.doi.org/10.1088/1742-6596/1623/1/012021\n\n\nM. Zingale, A. S. Almgren, M. Barrios Sazo, J. B. Bell, K. Eiden, A. Harpole, M. P. Katz, A. J. Nonaka, D. E. Willcox, W. Zhang\n2020, Journal of Physics: Conference Series, 1623, 012021\nhttps://www.doi.org/10.1088/1742-6596/1623/1/012021"
  },
  {
    "objectID": "publications.html#modelling-low-mach-number-stellar-hydrodynamics-with-maestroex",
    "href": "publications.html#modelling-low-mach-number-stellar-hydrodynamics-with-maestroex",
    "title": "Publications",
    "section": "",
    "text": "GPU speedup for MAESTROeX core subroutines on the Summit supercomputer. DOI: https://www.doi.org/10.1088/1742-6596/1623/1/012015\n\n\nA. Harpole, D. Fan, M. P. Katz, A. J. Nonaka, D. E. Willcox, M. Zingale\n2020, Journal of Physics: Conference Series, 1623, 012015\nhttps://www.doi.org/10.1088/1742-6596/1623/1/012015"
  },
  {
    "objectID": "publications.html#maestroex-a-massively-parallel-low-mach-number-astrophysical-solver",
    "href": "publications.html#maestroex-a-massively-parallel-low-mach-number-astrophysical-solver",
    "title": "Publications",
    "section": "",
    "text": "Logo of the Journal of Open Source Software, used under the CC BY 4.0 License. DOI: https://www.doi.org/10.21105/joss.01757\n\n\nD. Fan, A. Nonaka, A. Almgren, D. Willcox, A. Harpole, M. Zingale\n2019, Journal of Open Source Software, 4, 43, 1757\nhttps://www.doi.org/10.21105/joss.01757"
  },
  {
    "objectID": "publications.html#sn-ia-explosions-from-hybrid-carbon-oxygen-neon-white-dwarf-progenitors-that-have-mixed-during-cooling",
    "href": "publications.html#sn-ia-explosions-from-hybrid-carbon-oxygen-neon-white-dwarf-progenitors-that-have-mixed-during-cooling",
    "title": "Publications",
    "section": "",
    "text": "Estimated Nickel-56 mass produced by mixed, hybrid Carbon-Oxygen-Neon white dwarf models. DOI: https://www.doi.org/10.3847/1538-4357/ab511a\n\n\nC. N. Augustine, D. E. Willcox, J. Brooks, D. M. Townsley, A. C. Calder\n2019, Astrophysical Journal, 887, 188\nhttps://www.doi.org/10.3847/1538-4357/ab511a"
  },
  {
    "objectID": "publications.html#toward-resolved-simulations-of-burning-fronts-in-thermonuclear-x-ray-bursts",
    "href": "publications.html#toward-resolved-simulations-of-burning-fronts-in-thermonuclear-x-ray-bursts",
    "title": "Publications",
    "section": "",
    "text": "Nuclear energy generation rate inside a helium flame on a neutron star surface. DOI: https://www.doi.org/10.1088/1742-6596/1225/1/012005\n\n\nM. Zingale, K. Eiden, Y. Cavecchi, A. Harpole, J. B. Bell, M. Chang, I. Hawke, M. P. Katz, C. M. Malone, A. J. Nonaka, D. E. Willcox, W. Zhang\n2019, Journal of Physics: Conference Series, 1225, 012005\nhttps://www.doi.org/10.1088/1742-6596/1225/1/012005"
  },
  {
    "objectID": "publications.html#thermonuclear-type-ia-supernovae-and-progenitor-evolution",
    "href": "publications.html#thermonuclear-type-ia-supernovae-and-progenitor-evolution",
    "title": "Publications",
    "section": "",
    "text": "Specific energy generation rate in a simulated white dwarf cross section resulting from carbon fusion and A=23 Urca reactions. DOI: https://www.doi.org/10.1088/1742-6596/1225/1/012002\n\n\nA. C. Calder, D. E. Willcox, C. J. DeGrendele, D. Shangase, M. Zingale, D. M. Townsley\n2019, Journal of Physics: Conference Series, 1225, 012002\nhttps://www.doi.org/10.1088/1742-6596/1225/1/012002"
  },
  {
    "objectID": "publications.html#quantification-of-incertitude-in-black-box-simulation-codes",
    "href": "publications.html#quantification-of-incertitude-in-black-box-simulation-codes",
    "title": "Publications",
    "section": "",
    "text": "Surface plot showing model white dwarf’s mass dependence on wind parameters driving mass loss. DOI: https://www.doi.org/10.1088/1742-6596/1031/1/012016\n\n\nA. C. Calder, M. M. Hoffman, D. E. Willcox, M. P. Katz, F. D. Swesty, S. Ferson\n2018, Journal of Physics: Conference Series, 1031, 012016\nhttps://www.doi.org/10.1088/1742-6596/1031/1/012016"
  },
  {
    "objectID": "publications.html#pynucastro-an-interface-to-nuclear-reaction-rates-and-code-generator-for-reaction-network-equations",
    "href": "publications.html#pynucastro-an-interface-to-nuclear-reaction-rates-and-code-generator-for-reaction-network-equations",
    "title": "Publications",
    "section": "",
    "text": "Logo of the Journal of Open Source Software, used under the CC BY 4.0 License. DOI: https://www.doi.org/10.21105/joss.00588\n\n\nD. E. Willcox, M. Zingale\n2018, Journal of Open Source Software, 3(23), 588\nhttps://www.doi.org/10.21105/joss.00588"
  },
  {
    "objectID": "publications.html#meeting-the-challenges-of-modeling-astrophysical-thermonuclear-explosions-castro-maestro-and-the-amrex-astrophysics-suite",
    "href": "publications.html#meeting-the-challenges-of-modeling-astrophysical-thermonuclear-explosions-castro-maestro-and-the-amrex-astrophysics-suite",
    "title": "Publications",
    "section": "",
    "text": "Density contours from a simulation of merging white dwarfs. DOI: https://www.doi.org/10.1088/1742-6596/1031/1/012024\n\n\nM. Zingale, A. S. Almgren, M. G. Barrios Sazo, V. E. Beckner, J. B. Bell, B. Friesen, A. M. Jacobs, M. P. Katz, C. M. Malone, A. J. Nonaka, D. E. Willcox, W. Zhang\n2018, Journal of Physics: Conference Series, 1031, 012024\nhttps://www.doi.org/10.1088/1742-6596/1031/1/012024"
  },
  {
    "objectID": "publications.html#cosmic-chandlery-with-thermonuclear-supernovae",
    "href": "publications.html#cosmic-chandlery-with-thermonuclear-supernovae",
    "title": "Publications",
    "section": "",
    "text": "Deflagration-to-detonation transition for a simulated C-O white dwarf. DOI: https://www.doi.org/10.1088/1742-6596/837/1/012005\n\n\nA. C. Calder, B. K. Krueger, A. P. Jackson, D. E. Willcox, B. J. Miles, D. M. Townsley\n2017, Journal of Physics: Conference Series, 837, 012005\nhttps://www.doi.org/10.1088/1742-6596/837/1/012005"
  },
  {
    "objectID": "publications.html#type-ia-supernova-explosions-from-hybrid-carbon-oxygen-neon-white-dwarf-progenitors",
    "href": "publications.html#type-ia-supernova-explosions-from-hybrid-carbon-oxygen-neon-white-dwarf-progenitors",
    "title": "Publications",
    "section": "",
    "text": "Progress of the burning front into the stellar core for one simulated hybrid C-O-Ne white dwarf. DOI: https://www.doi.org/10.3847/0004-637X/832/1/13\n\n\nD. E. Willcox, D. M. Townsley, A. C. Calder, P. Denissenkov, F. Herwig\n2016, Astrophysical Journal, 832, 13\nhttps://www.doi.org/10.3847/0004-637X/832/1/13"
  },
  {
    "objectID": "research_horizons.html",
    "href": "research_horizons.html",
    "title": "What’s Next?",
    "section": "",
    "text": "What’s Next?\nQuite a lot! Here are some research directions I am looking forward to pursuing next:\n\nApplying forward simulation techniques I’ve developed to novel scientific contexts\nEfficient forward simulations for solving inverse problems\nIncorporating data science of observations to better guide numerical simulations to the right initial hypotheses\nCombining Machine Learning surrogate modeling with multiscale simulation frameworks with reliable error control\nAdaptive subgrid methods that more efficiently use computational resources by adapting our accuracy to each term in the PDE system we model\n\n\n\n\n\n Back to top",
    "crumbs": [
      "What's Next?"
    ]
  }
]